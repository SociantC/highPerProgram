Index: ../multi-thread/src/main/java/com/study/multithread/capture1/TestBiased.java
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture1/TestBiased.java b/../multi-thread/src/main/java/com/study/multithread/capture1/TestBiased.java
deleted file mode 100644
--- a/../multi-thread/src/main/java/com/study/multithread/capture1/TestBiased.java	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
+++ /dev/null	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
@@ -1,17 +0,0 @@
-package com.study.multithread.capture1;
-
-import lombok.extern.slf4j.Slf4j;
-import org.openjdk.jol.info.ClassLayout;
-
-@Slf4j(topic = "c.TestBiased")
-public class TestBiased {
-
-    public static void main(String[] args) {
-        Dog dog = new Dog();
-        System.out.println(ClassLayout.parseInstance(dog).toPrintable(true));
-    }
-}
-
-class Dog{
-
-}
Index: ../multi-thread/src/main/java/com/study/design/IdGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/IdGenerator.java b/../multi-thread/src/main/java/com/study/design/IdGenerator.java
new file mode 100644
--- /dev/null	(date 1639118256060)
+++ b/../multi-thread/src/main/java/com/study/design/IdGenerator.java	(date 1639118256060)
@@ -0,0 +1,40 @@
+package com.study.design;
+
+import lombok.extern.slf4j.Slf4j;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Random;
+
+@Slf4j
+public class IdGenerator {
+    public static String generate(){
+        String id = "";
+        try {
+            String hostName = InetAddress.getLocalHost().getHostName();
+            String[] tokens = hostName.split("\\.");
+            if (tokens.length > 0) {
+                hostName = tokens[tokens.length - 1];
+            }
+            char[] randomChars = new char[8];
+            int count = 0;
+            Random random = new Random();
+            while (count < 8) {
+                int randomAscii = random.nextInt(122);
+                if (randomAscii >= 48 && randomAscii <= 57) {
+                    randomChars[count] = (char) ('0' + (randomAscii - 48));
+                    count++;
+                } else if (randomAscii >= 65 && randomAscii <= 90) {
+                    randomChars[count] = (char) ('A' + (randomAscii - 65));
+                } else if (randomAscii >= 97) {
+                    randomChars[count] = (char) ('a' + (randomAscii - 97));
+                }
+            }
+            id = String.format("%s-%d-%s", hostName, System.currentTimeMillis(), new String(randomChars));
+
+        }catch (UnknownHostException e){
+            log.warn("Failed to get the host name,reason{}",e.getMessage());
+        }
+        return id;
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version0/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version0/UserController.java b/../multi-thread/src/main/java/com/study/design/metrics/version0/UserController.java
new file mode 100644
--- /dev/null	(date 1639117055733)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version0/UserController.java	(date 1639117055733)
@@ -0,0 +1,38 @@
+package com.study.design.metrics.version0;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/6
+ */
+public class UserController {
+
+    private Metrics metrics = new Metrics();
+
+    public UserController() {
+        metrics.startRepeatedReport(60, TimeUnit.SECONDS);
+    }
+
+    public void register(UserVo user){
+        long startTime = System.currentTimeMillis();
+        metrics.recordTimeStamp("register", startTime);
+
+        long respTime = System.currentTimeMillis() - startTime;
+        metrics.recordResponseTime("register", respTime);
+    }
+
+
+
+    public UserVo login(String telephone, String password){
+        long startTime = System.currentTimeMillis();
+        metrics.recordTimeStamp("login", startTime);
+        UserVo userVo = new UserVo();
+        long respTime = System.currentTimeMillis() - startTime;
+        metrics.recordResponseTime("login", respTime);
+
+        return userVo;
+    }
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/Bean1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/Bean1.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/Bean1.java
new file mode 100644
--- /dev/null	(date 1648348232686)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/Bean1.java	(date 1648348232686)
@@ -0,0 +1,13 @@
+package com.study.springstudy.c05BeanFacPostProces;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class Bean1 {
+
+    private static final Logger log = LoggerFactory.getLogger(Bean1.class);
+
+    public Bean1() {
+        log.debug("我被 Spring 管理啦");
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version0/Metrics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version0/Metrics.java b/../multi-thread/src/main/java/com/study/design/metrics/version0/Metrics.java
new file mode 100644
--- /dev/null	(date 1639117055733)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version0/Metrics.java	(date 1639117055733)
@@ -0,0 +1,67 @@
+package com.study.design.metrics.version0;
+
+import com.google.gson.Gson;
+
+import java.util.*;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class Metrics {
+    private Map<String, List<Double>> responseTimes = new HashMap<>();
+    private Map<String, List<Double>> timeStamps = new HashMap<>();
+    private ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
+
+    public void recordResponseTime(String apiTime, double responseTime) {
+        responseTimes.putIfAbsent(apiTime, new ArrayList<>());
+        responseTimes.get(apiTime).add(responseTime);
+    }
+
+    public void recordTimeStamp(String apiName, double timeStamp) {
+        timeStamps.putIfAbsent(apiName, new ArrayList<>());
+        timeStamps.get(apiName).add(timeStamp);
+    }
+
+    public void startRepeatedReport(long period, TimeUnit unit) {
+        executor.scheduleAtFixedRate(() -> {
+            Gson gson = new Gson();
+            Map<String, Map<String, Double>> stats = new HashMap<>();
+            for (Map.Entry<String, List<Double>> entry : responseTimes.entrySet()) {
+                String apiName = entry.getKey();
+                List<Double> respsontimes = entry.getValue();
+                stats.putIfAbsent(apiName, new HashMap<>());
+                stats.get(apiName).put("max", max(respsontimes));
+                stats.get(apiName).put("min", min(respsontimes));
+            }
+
+            for (Map.Entry<String, List<Double>> entry : timeStamps.entrySet()) {
+                String apiName = entry.getKey();
+                List<Double> timestamps = entry.getValue();
+                stats.putIfAbsent(apiName, new HashMap<>());
+                stats.get(apiName).put("count", (double) timestamps.size());
+            }
+
+            System.out.println(gson.toJson(stats));
+        }, 0, period, unit);
+
+    }
+
+    private double max(List<Double> time) {
+        OptionalDouble max = time.stream().mapToDouble(i -> i).max();
+        return max.isPresent()?max.getAsDouble():-1d;
+    }
+
+    private double min(List<Double> time) {
+        OptionalDouble min = time.stream().mapToDouble(i -> i).min();
+        return min.isPresent()?min.getAsDouble():-1d;
+    }
+
+
+
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean2.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean2.java
new file mode 100644
--- /dev/null	(date 1648348207733)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean2.java	(date 1648348207733)
@@ -0,0 +1,15 @@
+package com.study.springstudy.c05BeanFacPostProces.component;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+
+@Component
+public class Bean2 {
+
+    private static final Logger log = LoggerFactory.getLogger(Bean2.class);
+
+    public Bean2() {
+        log.debug("我被 Spring 管理啦");
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version0/UserVo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version0/UserVo.java b/../multi-thread/src/main/java/com/study/design/metrics/version0/UserVo.java
new file mode 100644
--- /dev/null	(date 1639117055733)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version0/UserVo.java	(date 1639117055733)
@@ -0,0 +1,10 @@
+package com.study.design.metrics.version0;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/6
+ */
+public class UserVo {
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/Aggregator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/Aggregator.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/Aggregator.java
new file mode 100644
--- /dev/null	(date 1639117055734)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/Aggregator.java	(date 1639117055734)
@@ -0,0 +1,68 @@
+package com.study.design.metrics.version1;
+
+import com.study.design.metrics.version1.entity.RequestInfo;
+import com.study.design.metrics.version1.entity.RequestStat;
+
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * 说明:
+ * 根据原始数据计算统计数据
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class Aggregator {
+    public static RequestStat aggreagte(List<RequestInfo> requestInfos, long duringInMills) {
+        double maxRespTime = Double.MIN_VALUE;
+        double minRespTime = Double.MAX_VALUE;
+
+        double avgRespTime = -1;
+        double p999RespTime = -1;
+        double p99RespTime = -1;
+        double sumRespTime = 0;
+
+        long count = 0;
+        for (RequestInfo requestInfo : requestInfos) {
+            ++count;
+            double respTime = requestInfo.getResponseTime();
+            if (respTime > maxRespTime) {
+                maxRespTime = respTime;
+            }
+
+            if (respTime < minRespTime) {
+                minRespTime = respTime;
+            }
+
+            sumRespTime += respTime;
+        }
+
+        if (count != 0) {
+            avgRespTime = sumRespTime / count;
+        }
+
+        long tps = (long) (count / duringInMills * 1000);
+        Collections.sort(requestInfos, new Comparator<RequestInfo>() {
+            @Override
+            public int compare(RequestInfo o1, RequestInfo o2) {
+                double diff = o1.getResponseTime() - o2.getResponseTime();
+                return Double.compare(diff, 0.0d);
+            }
+        });
+
+        int idx999 = (int) (count * 0.999);
+        int idx99 = (int) (count * 0.99);
+        if (count != 0) {
+            p999RespTime = requestInfos.get(idx999).getResponseTime();
+            p99RespTime = requestInfos.get(idx99).getResponseTime();
+        }
+
+        return new RequestStat(maxRespTime, minRespTime, avgRespTime, p999RespTime, p99RespTime, count, tps);
+
+
+    }
+
+
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/Demo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/Demo.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/Demo.java
new file mode 100644
--- /dev/null	(date 1639117055734)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/Demo.java	(date 1639117055734)
@@ -0,0 +1,38 @@
+package com.study.design.metrics.version1;
+
+import com.study.design.metrics.version1.entity.RequestInfo;
+import com.study.design.metrics.version1.metrics.MetricsStorage;
+import com.study.design.metrics.version1.metrics.RedisMetricsStorage;
+import com.study.design.metrics.version1.reporter.ConsoleReporter;
+import com.study.design.metrics.version1.reporter.EmailReporter;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/8
+ */
+public class Demo {
+    public static void main(String[] args) {
+        MetricsStorage storage = new RedisMetricsStorage();
+        ConsoleReporter consoleReporter = new ConsoleReporter(storage);
+        consoleReporter.startRepeatedReport(60, 60);
+
+        EmailReporter emailReporter = new EmailReporter(storage);
+        emailReporter.addToAddress("caoguanghua@ddd.com");
+        emailReporter.startDailyReport();
+
+        MetricsCollector collector = new MetricsCollector(storage);
+        collector.recordRequest(new RequestInfo("register",123,12441));
+        collector.recordRequest(new RequestInfo("register",223,12541));
+        collector.recordRequest(new RequestInfo("register",323,12641));
+        collector.recordRequest(new RequestInfo("login",23,12441));
+        collector.recordRequest(new RequestInfo("login",1223,13244));
+
+        try {
+            Thread.sleep(10000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper2.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper2.java
new file mode 100644
--- /dev/null	(date 1648348892291)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper2.java	(date 1648348892291)
@@ -0,0 +1,7 @@
+package com.study.springstudy.c05BeanFacPostProces.mapper;
+
+import org.apache.ibatis.annotations.Mapper;
+
+@Mapper
+public interface Mapper2 {
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/MetricsCollector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/MetricsCollector.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/MetricsCollector.java
new file mode 100644
--- /dev/null	(date 1639117055749)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/MetricsCollector.java	(date 1639117055749)
@@ -0,0 +1,28 @@
+package com.study.design.metrics.version1;
+
+import com.study.design.metrics.version1.entity.RequestInfo;
+import com.study.design.metrics.version1.metrics.MetricsStorage;
+import org.springframework.util.StringUtils;
+
+/**
+ * 说明:
+ * 提供API。采集接口请求的原始数据。
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class MetricsCollector {
+    private MetricsStorage metricsStorage;
+
+    public MetricsCollector(MetricsStorage metricsStorage) {
+        this.metricsStorage = metricsStorage;
+    }
+
+    public void recordRequest(RequestInfo requestInfo) {
+        if (requestInfo == null || StringUtils.hasText(requestInfo.getApiName())) {
+            return;
+        }
+        metricsStorage.saveRequestInfo(requestInfo);
+    }
+
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper1.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper1.java
new file mode 100644
--- /dev/null	(date 1648348892297)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/mapper/Mapper1.java	(date 1648348892297)
@@ -0,0 +1,7 @@
+package com.study.springstudy.c05BeanFacPostProces.mapper;
+
+import org.apache.ibatis.annotations.Mapper;
+
+@Mapper
+public interface Mapper1 {
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/UserController.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/UserController.java
new file mode 100644
--- /dev/null	(date 1639117055749)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/UserController.java	(date 1639117055749)
@@ -0,0 +1,40 @@
+package com.study.design.metrics.version1;
+
+import com.study.design.metrics.version1.entity.UserVo;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/6
+ */
+public class UserController {
+
+    private Metrics metrics = new Metrics();
+
+    public UserController() {
+        metrics.startRepeatedReport(60, TimeUnit.SECONDS);
+    }
+
+    public void register(UserVo user){
+        long startTime = System.currentTimeMillis();
+        metrics.recordTimeStamp("register", startTime);
+
+        long respTime = System.currentTimeMillis() - startTime;
+        metrics.recordResponseTime("register", respTime);
+    }
+
+
+
+    public UserVo login(String telephone, String password){
+        long startTime = System.currentTimeMillis();
+        metrics.recordTimeStamp("login", startTime);
+        UserVo userVo = new UserVo();
+        long respTime = System.currentTimeMillis() - startTime;
+        metrics.recordResponseTime("login", respTime);
+
+        return userVo;
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/Metrics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/Metrics.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/Metrics.java
new file mode 100644
--- /dev/null	(date 1639117055735)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/Metrics.java	(date 1639117055735)
@@ -0,0 +1,68 @@
+package com.study.design.metrics.version1;
+
+import com.google.gson.Gson;
+
+import java.util.*;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class Metrics {
+    private Map<String, List<Double>> responseTimes = new HashMap<>();
+    private Map<String, List<Double>> timeStamps = new HashMap<>();
+    private ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
+
+    public void recordResponseTime(String apiTime, double responseTime) {
+        responseTimes.putIfAbsent(apiTime, new ArrayList<>());
+        responseTimes.get(apiTime).add(responseTime);
+    }
+
+    public void recordTimeStamp(String apiName, double timeStamp) {
+        timeStamps.putIfAbsent(apiName, new ArrayList<>());
+        timeStamps.get(apiName).add(timeStamp);
+    }
+
+    public void startRepeatedReport(long period, TimeUnit unit) {
+        executor.scheduleAtFixedRate(() -> {
+            Gson gson = new Gson();
+            Map<String, Map<String, Double>> stats = new HashMap<>();
+            for (Map.Entry<String, List<Double>> entry : responseTimes.entrySet()) {
+                String apiName = entry.getKey();
+                List<Double> respsontimes = entry.getValue();
+                stats.putIfAbsent(apiName, new HashMap<>());
+                stats.get(apiName).put("max", max(respsontimes));
+                stats.get(apiName).put("min", min(respsontimes));
+            }
+
+            for (Map.Entry<String, List<Double>> entry : timeStamps.entrySet()) {
+                String apiName = entry.getKey();
+                List<Double> timestamps = entry.getValue();
+                stats.putIfAbsent(apiName, new HashMap<>());
+                stats.get(apiName).put("count", (double) timestamps.size());
+            }
+
+            System.out.println(gson.toJson(stats));
+        }, 0, period, unit);
+
+    }
+
+    private double max(List<Double> time) {
+        OptionalDouble max = time.stream().mapToDouble(i -> i).max();
+        return max.isPresent()?max.getAsDouble():-1d;
+    }
+
+    private double min(List<Double> time) {
+        OptionalDouble min = time.stream().mapToDouble(i -> i).min();
+        return min.isPresent()?min.getAsDouble():-1d;
+    }
+
+
+
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/Config.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/Config.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/Config.java
new file mode 100644
--- /dev/null	(date 1648387745404)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/Config.java	(date 1648387745404)
@@ -0,0 +1,56 @@
+package com.study.springstudy.c05BeanFacPostProces;
+
+
+import com.alibaba.druid.pool.DruidDataSource;
+import com.study.springstudy.c05BeanFacPostProces.mapper.Mapper1;
+import com.study.springstudy.c05BeanFacPostProces.mapper.Mapper2;
+import org.apache.ibatis.session.SqlSessionFactory;
+import org.mybatis.spring.SqlSessionFactoryBean;
+import org.mybatis.spring.mapper.MapperFactoryBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.context.annotation.Configuration;
+
+import javax.sql.DataSource;
+
+@Configuration
+@ComponentScan("com.study.springstudy.c05BeanFacPostProces.component")
+public class Config {
+    @Bean
+    public Bean1 bean1(){
+        return new Bean1();
+    }
+    public Bean1 bean2(){
+        return new Bean1();
+    }
+
+    @Bean
+    public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource) {
+        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
+        sqlSessionFactoryBean.setDataSource(dataSource);
+        return sqlSessionFactoryBean;
+    }
+
+    @Bean(initMethod = "init")
+    public DruidDataSource dataSource(){
+        DruidDataSource dataSource = new DruidDataSource();
+        dataSource.setUrl("jdbc:mysql://121.36.147.178:3306/sonar");
+        dataSource.setUsername("root");
+        dataSource.setPassword("Cetc28.com");
+        return dataSource;
+    }
+
+//    @Bean
+//    public MapperFactoryBean<Mapper1> mapper1(SqlSessionFactory sqlSessionFactory){
+//        MapperFactoryBean<Mapper1> factory = new MapperFactoryBean<>(Mapper1.class);
+//        factory.setSqlSessionFactory(sqlSessionFactory);
+//        return factory;
+//    }
+//
+//    @Bean
+//    public MapperFactoryBean<Mapper2> mapper2(SqlSessionFactory sqlSessionFactory){
+//        MapperFactoryBean<Mapper2> factory = new MapperFactoryBean<>(Mapper2.class);
+//        factory.setSqlSessionFactory(sqlSessionFactory);
+//        return factory;
+//    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestStat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestStat.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestStat.java
new file mode 100644
--- /dev/null	(date 1639117055750)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestStat.java	(date 1639117055750)
@@ -0,0 +1,86 @@
+package com.study.design.metrics.version1.entity;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class RequestStat {
+    private double maxResponseTime;
+    private double minResponseTime;
+    private double avgResponseTime;
+    private double p999ResponseTime;
+    private double p99ResponseTime;
+    private long count;
+    private long tps;
+
+    public RequestStat() {
+    }
+
+    public RequestStat(double maxResponseTime, double minResponseTime, double avgResponseTime, double p999ResponseTime, double p99ResponseTime, long count, long tps) {
+        this.maxResponseTime = maxResponseTime;
+        this.minResponseTime = minResponseTime;
+        this.avgResponseTime = avgResponseTime;
+        this.p999ResponseTime = p999ResponseTime;
+        this.p99ResponseTime = p99ResponseTime;
+        this.count = count;
+        this.tps = tps;
+    }
+
+    public double getMaxResponseTime() {
+        return maxResponseTime;
+    }
+
+    public void setMaxResponseTime(double maxResponseTime) {
+        this.maxResponseTime = maxResponseTime;
+    }
+
+    public double getMinResponseTime() {
+        return minResponseTime;
+    }
+
+    public void setMinResponseTime(double minResponseTime) {
+        this.minResponseTime = minResponseTime;
+    }
+
+    public double getAvgResponseTime() {
+        return avgResponseTime;
+    }
+
+    public void setAvgResponseTime(double avgResponseTime) {
+        this.avgResponseTime = avgResponseTime;
+    }
+
+    public double getP999ResponseTime() {
+        return p999ResponseTime;
+    }
+
+    public void setP999ResponseTime(double p999ResponseTime) {
+        this.p999ResponseTime = p999ResponseTime;
+    }
+
+    public double getP99ResponseTime() {
+        return p99ResponseTime;
+    }
+
+    public void setP99ResponseTime(double p99ResponseTime) {
+        this.p99ResponseTime = p99ResponseTime;
+    }
+
+    public long getCount() {
+        return count;
+    }
+
+    public void setCount(long count) {
+        this.count = count;
+    }
+
+    public long getTps() {
+        return tps;
+    }
+
+    public void setTps(long tps) {
+        this.tps = tps;
+    }
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/C05Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/C05Application.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/C05Application.java
new file mode 100644
--- /dev/null	(date 1648388361457)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/C05Application.java	(date 1648388361457)
@@ -0,0 +1,50 @@
+package com.study.springstudy.c05BeanFacPostProces;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.support.AbstractBeanDefinition;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.BeanNameGenerator;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.context.annotation.AnnotationBeanNameGenerator;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.context.support.GenericApplicationContext;
+import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.Resource;
+import org.springframework.core.type.AnnotationMetadata;
+import org.springframework.core.type.MethodMetadata;
+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;
+import org.springframework.core.type.classreading.MetadataReader;
+import org.springframework.stereotype.Component;
+
+import java.util.Set;
+
+@Slf4j
+public class C05Application {
+    public static void main(String[] args) throws Exception{
+        GenericApplicationContext context = new GenericApplicationContext();
+        context.registerBean("config",Config.class);
+        // @ComponentScan @Bean @Import @ImportResource
+//        context.registerBean(ConfigurationClassPostProcessor.class);
+//        // @MapperScanner
+//        context.registerBean(MapperScannerConfigurer.class,beanDefinition -> {
+//            beanDefinition.getPropertyValues()
+//                    .add("basePackage", "com.study.springstudy.c05BeanFacPostProces.mapper");
+//        });
+        // 拿到注解 @ComponentScan
+//        context.registerBean(ComponentScanPostProcessor.class);
+
+        // @Bean
+        context.registerBean(AtBeanPostProcessor.class);
+        // @Mapper
+        context.registerBean(MapperPostProcessor.class);
+
+
+        context.refresh();
+        for (String name : context.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+        context.close();
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/entity/UserVo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/UserVo.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/UserVo.java
new file mode 100644
--- /dev/null	(date 1639117055751)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/UserVo.java	(date 1639117055751)
@@ -0,0 +1,10 @@
+package com.study.design.metrics.version1.entity;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/6
+ */
+public class UserVo {
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestInfo.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestInfo.java
new file mode 100644
--- /dev/null	(date 1639117055750)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/entity/RequestInfo.java	(date 1639117055750)
@@ -0,0 +1,43 @@
+package com.study.design.metrics.version1.entity;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class RequestInfo {
+    private String apiName;
+    private double responseTime;
+    private long timeStamp;
+
+    public RequestInfo(String apiName, double responseTime, long timeStamp) {
+        this.apiName = apiName;
+        this.responseTime = responseTime;
+        this.timeStamp = timeStamp;
+    }
+
+    public String getApiName() {
+        return apiName;
+    }
+
+    public void setApiName(String apiName) {
+        this.apiName = apiName;
+    }
+
+    public double getResponseTime() {
+        return responseTime;
+    }
+
+    public void setResponseTime(double responseTime) {
+        this.responseTime = responseTime;
+    }
+
+    public long getTimeStamp() {
+        return timeStamp;
+    }
+
+    public void setTimeStamp(long timeStamp) {
+        this.timeStamp = timeStamp;
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/capture3/TestSchedule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture3/TestSchedule.java b/../multi-thread/src/main/java/com/study/multithread/capture3/TestSchedule.java
new file mode 100644
--- /dev/null	(date 1647827836955)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture3/TestSchedule.java	(date 1647827836955)
@@ -0,0 +1,11 @@
+package com.study.multithread.capture3;
+
+import java.time.LocalDateTime;
+
+public class TestSchedule {
+
+    public static void main(String[] args) {
+        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime time = now.withHour(8);
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/RedisMetricsStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/RedisMetricsStorage.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/RedisMetricsStorage.java
new file mode 100644
--- /dev/null	(date 1639117055751)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/RedisMetricsStorage.java	(date 1639117055751)
@@ -0,0 +1,29 @@
+package com.study.design.metrics.version1.metrics;
+
+import com.study.design.metrics.version1.entity.RequestInfo;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class RedisMetricsStorage implements MetricsStorage{
+    @Override
+    public void saveRequestInfo(RequestInfo requestInfo) {
+
+    }
+
+    @Override
+    public List<RequestInfo> getRequestInfos(String apiName, long startTimeInMills, long endTimeInMills) {
+        return null;
+    }
+
+    @Override
+    public Map<String, List<RequestInfo>> getRequestInfos(long startTimeInMil, long endTimeInMills) {
+        return null;
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/MetricsStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/MetricsStorage.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/MetricsStorage.java
new file mode 100644
--- /dev/null	(date 1639117055751)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/metrics/MetricsStorage.java	(date 1639117055751)
@@ -0,0 +1,21 @@
+package com.study.design.metrics.version1.metrics;
+
+import com.study.design.metrics.version1.entity.RequestInfo;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 说明:
+ * 原始数据存储
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public interface MetricsStorage {
+    void saveRequestInfo(RequestInfo requestInfo);
+
+    List<RequestInfo> getRequestInfos(String apiName, long startTimeInMills, long endTimeInMills);
+
+    Map<String, List<RequestInfo>> getRequestInfos(long startTimeInMil, long endTimeInMills);
+
+}
Index: src/main/resources/logback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml
new file mode 100644
--- /dev/null	(date 1648348460451)
+++ b/src/main/resources/logback.xml	(date 1648348460451)
@@ -0,0 +1,106 @@
+<configuration>
+
+    <appender name="boldRed" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldRed([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="boldBlue" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldBlue([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="boldGreen" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldGreen([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="boldYellow" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldYellow([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="boldMagenta" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldMagenta([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="boldCyan" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldCyan([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="boldWhite" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%highlight([%level]) %d{HH:mm:ss.SSS} %boldWhite([%thread]) - %msg %n</pattern>
+        </encoder>
+    </appender>
+
+    <appender name="STDOUT" class="ch.qos.logback.classic.sift.SiftingAppender">
+        <discriminator>
+            <key>color</key>
+            <defaultValue>cyan</defaultValue>
+        </discriminator>
+        <sift>
+            <appender name="thread-${thread}" class="ch.qos.logback.core.ConsoleAppender">
+                <encoder>
+                    <pattern>%highlight([%-5level]) %d{HH:mm:ss.SSS} %boldWhite([%thread]) %-35logger{35} - %${color}(%msg) %n</pattern>
+                </encoder>
+            </appender>
+        </sift>
+    </appender>
+
+    <logger name="A" level="DEBUG" additivity="false">
+        <appender-ref ref="boldRed"/>
+    </logger>
+
+    <logger name="B" level="DEBUG" additivity="false">
+        <appender-ref ref="boldBlue"/>
+    </logger>
+
+    <logger name="C" level="DEBUG" additivity="false">
+        <appender-ref ref="boldGreen"/>
+    </logger>
+
+    <logger name="D" level="DEBUG" additivity="false">
+        <appender-ref ref="boldYellow"/>
+    </logger>
+
+    <logger name="E" level="DEBUG" additivity="false">
+        <appender-ref ref="boldMagenta"/>
+    </logger>
+
+    <logger name="F" level="DEBUG" additivity="false">
+        <appender-ref ref="boldCyan"/>
+    </logger>
+
+    <logger name="G" level="DEBUG" additivity="false">
+        <appender-ref ref="boldWhite"/>
+    </logger>
+
+    <logger name="com.study" level="debug" additivity="false">
+        <appender-ref ref="STDOUT"/>
+    </logger>
+
+    <logger name="org.springframework.web.servlet.resource" level="trace" additivity="false">
+        <appender-ref ref="STDOUT"/>
+    </logger>
+
+    <logger name="org.springframework.web.servlet.DispatcherServlet" level="trace" additivity="false">
+        <appender-ref ref="STDOUT"/>
+    </logger>
+
+    <logger name="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" level="trace" additivity="false">
+        <appender-ref ref="STDOUT"/>
+    </logger>
+
+    <root level="INFO">
+        <appender-ref ref="STDOUT"/>
+    </root>
+</configuration>
\ No newline at end of file
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailReporter.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailReporter.java
new file mode 100644
--- /dev/null	(date 1639117055752)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailReporter.java	(date 1639117055752)
@@ -0,0 +1,68 @@
+package com.study.design.metrics.version1.reporter;
+
+import com.google.gson.Gson;
+import com.study.design.metrics.version1.Aggregator;
+import com.study.design.metrics.version1.entity.RequestInfo;
+import com.study.design.metrics.version1.entity.RequestStat;
+import com.study.design.metrics.version1.metrics.MetricsStorage;
+
+import java.util.*;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 说明:
+ * 发送统计数据至邮件
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class EmailReporter {
+    private static final Long DAY_HOURS_IN_SECONDS = 86400L;
+
+    private MetricsStorage metricsStorage;
+    private EmailSender emailSender;
+    private List<String> toAddresses = new ArrayList<>();
+
+    public EmailReporter(MetricsStorage metricsStorage) {
+        this(metricsStorage, new EmailSender(/*省略参数*/));
+    }
+
+    public EmailReporter(MetricsStorage metricsStorage, EmailSender emailSender) {
+        this.metricsStorage = metricsStorage;
+        this.emailSender = emailSender;
+    }
+
+    public void addToAddress(String address) {
+        toAddresses.add(address);
+    }
+
+    public void startDailyReport() {
+        Calendar calendar = Calendar.getInstance();
+        calendar.add(Calendar.DATE, 1);
+        calendar.set(Calendar.HOUR_OF_DAY, 0);
+        calendar.set(Calendar.MINUTE, 0);
+        calendar.set(Calendar.SECOND, 0);
+        calendar.set(Calendar.MILLISECOND, 0);
+        Date firstTime = calendar.getTime();
+        Timer timer = new Timer();
+        timer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                long durationInMillis = DAY_HOURS_IN_SECONDS * 1000;
+                long endTimeInMillis = System.currentTimeMillis();
+                long startTimeInMillis = endTimeInMillis - durationInMillis;
+                Map<String, List<RequestInfo>> requestInfos =
+                        metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);
+                Map<String, RequestStat> stats = new HashMap<>();
+                for (Map.Entry<String, List<RequestInfo>> entry : requestInfos.entrySet()) {
+                    String apiName = entry.getKey();
+                    List<RequestInfo> requestInfosPerApi = entry.getValue();
+                    RequestStat requestStat = Aggregator.aggreagte(requestInfosPerApi, durationInMillis);
+                    stats.put(apiName, requestStat);
+                }
+                // TODO: 格式化为html格式，并且发送邮件
+            }
+        }, firstTime, DAY_HOURS_IN_SECONDS * 1000);
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/ConsoleReporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/ConsoleReporter.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/ConsoleReporter.java
new file mode 100644
--- /dev/null	(date 1639117055752)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/ConsoleReporter.java	(date 1639117055752)
@@ -0,0 +1,52 @@
+package com.study.design.metrics.version1.reporter;
+
+import com.google.gson.Gson;
+import com.study.design.metrics.version1.Aggregator;
+import com.study.design.metrics.version1.entity.RequestInfo;
+import com.study.design.metrics.version1.entity.RequestStat;
+import com.study.design.metrics.version1.metrics.MetricsStorage;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * 说明:
+ * 发送统计数据至命令行
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class ConsoleReporter {
+    private MetricsStorage metricsStorage;
+    private ScheduledExecutorService executor;
+
+    public ConsoleReporter(MetricsStorage metricsStorage) {
+        this.metricsStorage = metricsStorage;
+        this.executor = Executors.newSingleThreadScheduledExecutor();
+    }
+
+    public void startRepeatedReport(long periodInSeconds, long durationInSeconds) {
+        executor.scheduleAtFixedRate(() -> {
+            long durationInMills = durationInSeconds * 1000;
+            long endTimeInMills = System.currentTimeMillis();
+            long startTimeInMills = endTimeInMills - durationInMills;
+            Map<String, List<RequestInfo>> requestInfos = metricsStorage.getRequestInfos(startTimeInMills, endTimeInMills);
+            Map<String, RequestStat> stats = new HashMap<>();
+            for (Map.Entry<String, List<RequestInfo>> entry : requestInfos.entrySet()) {
+                String apiName = entry.getKey();
+                List<RequestInfo> requestInfosPerApi = entry.getValue();
+                RequestStat requestStat = Aggregator.aggreagte(requestInfosPerApi, durationInMills);
+                stats.put(apiName, requestStat);
+            }
+
+            System.out.println("Time Span: [" + startTimeInMills + ", " + endTimeInMills + "]");
+            Gson gson = new Gson();
+            System.out.println(gson.toJson(stats));
+        }, 0, periodInSeconds, TimeUnit.SECONDS);
+
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/testcase/Transaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/testcase/Transaction.java b/../multi-thread/src/main/java/com/study/design/testcase/Transaction.java
new file mode 100644
--- /dev/null	(date 1639118347976)
+++ b/../multi-thread/src/main/java/com/study/design/testcase/Transaction.java	(date 1639118347976)
@@ -0,0 +1,24 @@
+package com.study.design.testcase;
+
+
+import com.study.design.IdGenerator;
+
+public class Transaction {
+    private String id;
+    private Long buyerId;
+    private Long sellerId;
+    private Long producerId;
+    private String orderId;
+    private Long createTimestamp;
+    private Double amount;
+    private STATUS status;
+    private String walletTransactionId;
+
+    public Transaction(String preAssignId, Long buyerId, Long sellerId, Long producerId, String orderId) {
+        if (preAssignId != null && !preAssignId.isEmpty()) {
+            this.id = preAssignId;
+        }else {
+            this.id = IdGenerator.generate();
+        }
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailSender.java b/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailSender.java
new file mode 100644
--- /dev/null	(date 1639117055753)
+++ b/../multi-thread/src/main/java/com/study/design/metrics/version1/reporter/EmailSender.java	(date 1639117055753)
@@ -0,0 +1,10 @@
+package com.study.design.metrics.version1.reporter;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/12/7
+ */
+public class EmailSender {
+}
Index: ../multi-thread/src/main/java/com/study/design/idgenerate/RandomIdGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/idgenerate/RandomIdGenerator.java b/../multi-thread/src/main/java/com/study/design/idgenerate/RandomIdGenerator.java
new file mode 100644
--- /dev/null	(date 1644326490949)
+++ b/../multi-thread/src/main/java/com/study/design/idgenerate/RandomIdGenerator.java	(date 1644326490949)
@@ -0,0 +1,22 @@
+package com.study.design.idgenerate;
+
+public class RandomIdGenerator implements LogTraceIdGenerator {
+
+    @Override
+    public String generate() {
+        String substrOfHostName = getLastFieldOfHostName();
+        long currentTimeMillis = System.currentTimeMillis();
+        String randomString = generateRandomAlphameric();
+        String id = String.format("%s-%d-%s", substrOfHostName, currentTimeMillis, randomString);
+        return id;
+
+    }
+
+    private String generateRandomAlphameric() {
+        return "";
+    }
+
+    private String getLastFieldOfHostName() {
+        return "";
+    }
+}
Index: ../multi-thread/src/main/java/com/study/design/testcase/STATUS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/testcase/STATUS.java b/../multi-thread/src/main/java/com/study/design/testcase/STATUS.java
new file mode 100644
--- /dev/null	(date 1639117380514)
+++ b/../multi-thread/src/main/java/com/study/design/testcase/STATUS.java	(date 1639117380514)
@@ -0,0 +1,4 @@
+package com.study.design.testcase;
+
+public enum STATUS {
+}
Index: ../multi-thread/src/main/java/com/study/design/idgenerate/IdGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/idgenerate/IdGenerator.java b/../multi-thread/src/main/java/com/study/design/idgenerate/IdGenerator.java
new file mode 100644
--- /dev/null	(date 1639120629797)
+++ b/../multi-thread/src/main/java/com/study/design/idgenerate/IdGenerator.java	(date 1639120629797)
@@ -0,0 +1,5 @@
+package com.study.design.idgenerate;
+
+public interface IdGenerator {
+    String generate();
+}
Index: ../multi-thread/src/main/java/com/study/design/idgenerate/LogTraceIdGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/design/idgenerate/LogTraceIdGenerator.java b/../multi-thread/src/main/java/com/study/design/idgenerate/LogTraceIdGenerator.java
new file mode 100644
--- /dev/null	(date 1639120629791)
+++ b/../multi-thread/src/main/java/com/study/design/idgenerate/LogTraceIdGenerator.java	(date 1639120629791)
@@ -0,0 +1,4 @@
+package com.study.design.idgenerate;
+
+public interface LogTraceIdGenerator extends IdGenerator{
+}
Index: ../multi-thread/src/main/java/com/study/multithread/MultiThreadApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.study.multithread;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class MultiThreadApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MultiThreadApplication.class, args);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/MultiThreadApplication.java b/../multi-thread/src/main/java/com/study/multithread/MultiThreadApplication.java
--- a/../multi-thread/src/main/java/com/study/multithread/MultiThreadApplication.java	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
+++ b/../multi-thread/src/main/java/com/study/multithread/MultiThreadApplication.java	(date 1648036435683)
@@ -2,12 +2,13 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.ConfigurableApplicationContext;
 
 @SpringBootApplication
 public class MultiThreadApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(MultiThreadApplication.class, args);
+        ConfigurableApplicationContext context = SpringApplication.run(MultiThreadApplication.class, args);
     }
 
 }
Index: src/main/java/com/study/springstudy/c12/JdkProxyDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c12/JdkProxyDemo.java b/src/main/java/com/study/springstudy/c12/JdkProxyDemo.java
new file mode 100644
--- /dev/null	(date 1651322404446)
+++ b/src/main/java/com/study/springstudy/c12/JdkProxyDemo.java	(date 1651322404446)
@@ -0,0 +1,39 @@
+package com.study.springstudy.c12;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+
+public class JdkProxyDemo {
+    interface Foo{
+        void foo();
+    }
+
+    static class Target implements Foo{
+        @Override
+        public void foo() {
+            System.out.println("foo");
+        }
+    }
+    // jdk 只能针对接口代理
+    // cglib
+    public static void main(String[] args) {
+        Target target = new Target();
+
+        ClassLoader loader = JdkProxyDemo.class.getClassLoader();   // 用来记载在运行期间动态生成的字节码
+        Foo proxyInstance = (Foo) Proxy.newProxyInstance(loader, new Class[]{Foo.class}, (proxy, method, args1) -> {
+
+            System.out.println("before");
+            // 目标，方法，参数
+            // 方法 invoke 目标参数
+            Object returnObj = method.invoke(target, args1);
+            return returnObj;// 代理返回目标方法执行的结果
+
+
+        });
+
+
+        proxyInstance.foo();
+
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/reflect/ReflectionPerformanceActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/reflect/ReflectionPerformanceActivity.java b/../multi-thread/src/main/java/com/study/multithread/reflect/ReflectionPerformanceActivity.java
new file mode 100644
--- /dev/null	(date 1639117055755)
+++ b/../multi-thread/src/main/java/com/study/multithread/reflect/ReflectionPerformanceActivity.java	(date 1639117055755)
@@ -0,0 +1,11 @@
+package com.study.multithread.reflect;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/10/15
+ */
+public class ReflectionPerformanceActivity {
+
+}
Index: ../multi-thread/src/main/java/com/study/multithread/reflect/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/reflect/Company.java b/../multi-thread/src/main/java/com/study/multithread/reflect/Company.java
new file mode 100644
--- /dev/null	(date 1639117055754)
+++ b/../multi-thread/src/main/java/com/study/multithread/reflect/Company.java	(date 1639117055754)
@@ -0,0 +1,11 @@
+package com.study.multithread.reflect;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/10/15
+ */
+public interface Company {
+    String getCompany();
+}
Index: src/main/java/com/study/springstudy/c06Aware/MyConfig1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c06Aware/MyConfig1.java b/src/main/java/com/study/springstudy/c06Aware/MyConfig1.java
new file mode 100644
--- /dev/null	(date 1648475935311)
+++ b/src/main/java/com/study/springstudy/c06Aware/MyConfig1.java	(date 1648475935311)
@@ -0,0 +1,30 @@
+package com.study.springstudy.c06Aware;
+
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import javax.annotation.PostConstruct;
+
+@Configuration
+@Slf4j
+public class MyConfig1 {
+    @Autowired
+    public void setApplicationContext(ApplicationContext applicationContext) {
+        log.debug("注入 applicationContext");
+    }
+
+    @PostConstruct
+    public void init(){
+        log.debug("初始化");
+    }
+
+    @Bean   // 添加 beanFactory 后处理器
+    public BeanFactoryPostProcessor processor() {
+        return beanFactory -> log.debug("执行processor1");
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/reflect/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/reflect/Person.java b/../multi-thread/src/main/java/com/study/multithread/reflect/Person.java
new file mode 100644
--- /dev/null	(date 1639117055754)
+++ b/../multi-thread/src/main/java/com/study/multithread/reflect/Person.java	(date 1639117055754)
@@ -0,0 +1,43 @@
+package com.study.multithread.reflect;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/10/15
+ */
+public class Person {
+    String mName;
+    String mSex;
+    public int mAge;
+
+    public Person(String mName, String mSex, int mAge) {
+        this.mName = mName;
+        this.mSex = mSex;
+        this.mAge = mAge;
+    }
+
+    public String getmName() {
+        return mName;
+    }
+
+    public void setmName(String mName) {
+        this.mName = mName;
+    }
+
+    public String getmSex() {
+        return mSex;
+    }
+
+    public void setmSex(String mSex) {
+        this.mSex = mSex;
+    }
+
+    public int getmAge() {
+        return mAge;
+    }
+
+    public void setmAge(int mAge) {
+        this.mAge = mAge;
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/reflect/ReflectActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/reflect/ReflectActivity.java b/../multi-thread/src/main/java/com/study/multithread/reflect/ReflectActivity.java
new file mode 100644
--- /dev/null	(date 1639117055755)
+++ b/../multi-thread/src/main/java/com/study/multithread/reflect/ReflectActivity.java	(date 1639117055755)
@@ -0,0 +1,63 @@
+package com.study.multithread.reflect;
+
+import lombok.extern.slf4j.Slf4j;
+
+import java.lang.reflect.Method;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/10/15
+ */
+@Slf4j(topic = "c.Reflect")
+public class ReflectActivity{
+    private void getClassObject(){
+        Class<?> classObject = null;
+        classObject = getClassObject_1();
+        log.debug("classObject_1 name:{}", classObject.getName());
+
+        classObject = getClassObject_2();
+        log.debug("classObject_2 name:{}", classObject.getName());
+
+        classObject = getClassObject_3();
+        log.debug("classObject_3 name:{}", classObject.getName());
+    }
+
+    private void getAllMethods() {
+        ProgramMonkey programMonkey = new ProgramMonkey("xiaoming", "male", 12);
+        Method[] methods = programMonkey.getClass().getMethods();
+
+        for (Method method : methods) {
+            log.debug("method name:{}", method.getName());
+        }
+
+        try {
+            Method setMLanguageMethod = programMonkey.getClass().getMethod("setmLanguage", String.class);
+            setMLanguageMethod.setAccessible(true);
+
+            // 获取返回类型
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private Class<?> getClassObject_1(){
+        return ProgramMonkey.class;
+    }
+
+    private Class<?> getClassObject_2(){
+        ProgramMonkey programMonkey = new ProgramMonkey("xiaoming", "male", 12);
+        return programMonkey.getClass();
+    }
+
+    private Class<?> getClassObject_3(){
+        try {
+            return Class.forName("com.study.multithread.reflect.ProgramMonkey");
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/reflect/ProgramMonkey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/reflect/ProgramMonkey.java b/../multi-thread/src/main/java/com/study/multithread/reflect/ProgramMonkey.java
new file mode 100644
--- /dev/null	(date 1639117055754)
+++ b/../multi-thread/src/main/java/com/study/multithread/reflect/ProgramMonkey.java	(date 1639117055754)
@@ -0,0 +1,48 @@
+package com.study.multithread.reflect;
+
+/**
+ * 说明:
+ *
+ * @USER: Cgh
+ * @DATE: 2021/10/15
+ */
+public class ProgramMonkey extends Person implements Company {
+
+    String mLanguage = "C";
+    String mCompany = "VVS";
+
+    public ProgramMonkey(String mName, String mSex, int mAge) {
+        super(mName, mSex, mAge);
+    }
+
+    public ProgramMonkey(String mName, String mSex, int mAge, String mLanguage, String mCompany) {
+        super(mName, mSex, mAge);
+        this.mLanguage = mLanguage;
+        this.mCompany = mCompany;
+    }
+
+    @Override
+    public String getCompany() {
+        return null;
+    }
+
+    public String getmLanguage() {
+        return mLanguage;
+    }
+
+    public void setmLanguage(String mLanguage) {
+        this.mLanguage = mLanguage;
+    }
+
+    public String getmCompany() {
+        return mCompany;
+    }
+
+    public void setmCompany(String mCompany) {
+        this.mCompany = mCompany;
+    }
+
+    private int getSalaryPerMonth(){
+        return 12306;
+    }
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/ComponentScanPostProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/ComponentScanPostProcessor.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/ComponentScanPostProcessor.java
new file mode 100644
--- /dev/null	(date 1648355084843)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/ComponentScanPostProcessor.java	(date 1648355084843)
@@ -0,0 +1,64 @@
+package com.study.springstudy.c05BeanFacPostProces;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.AbstractBeanDefinition;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.context.annotation.AnnotationBeanNameGenerator;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
+import org.springframework.core.type.AnnotationMetadata;
+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;
+import org.springframework.core.type.classreading.MetadataReader;
+import org.springframework.stereotype.Component;
+
+import java.io.IOException;
+
+public class ComponentScanPostProcessor implements BeanFactoryPostProcessor {
+    @Override // context.refresh
+    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {
+        ComponentScan componentScan = AnnotationUtils.findAnnotation(Config.class, ComponentScan.class);
+
+        try {
+            if (componentScan != null) {
+                for (String p : componentScan.basePackages()) { // 确定扫描包
+                    System.out.println(p);
+                    // com.study.springstudy.c05BeanFacPostProces.component
+                    // classpath*:com/study/springstudy/c05BeanFacPostProces/component/**/*.class
+                    String path = "classpath*:" + p.replace(".", "/") + "/**/*.class";
+                    System.out.println(path);
+                    // 读取类源信息
+                    CachingMetadataReaderFactory factory = new CachingMetadataReaderFactory();
+                    AnnotationBeanNameGenerator generator = new AnnotationBeanNameGenerator();
+                    Resource[] resources = new PathMatchingResourcePatternResolver().getResources(path);
+                    for (Resource resource : resources) {
+                        System.out.println("resource:"+resource);
+                        // 拿到类名
+                        MetadataReader reader = factory.getMetadataReader(resource);
+                        // 得到二进制字节码类源信息
+    //                    System.out.println("类名："+reader.getClassMetadata().getClassName());
+                        AnnotationMetadata annotationMetadata = reader.getAnnotationMetadata();
+    //                    System.out.println("是否有component： "+ annotationMetadata.hasAnnotation(Component.class.getName()));
+    //                    System.out.println("是否有component派生注解： "+ annotationMetadata.hasMetaAnnotation(Component.class.getName()));
+                        // 看有没有component注解
+                        if (annotationMetadata.hasAnnotation(Component.class.getName())
+                                || annotationMetadata.hasMetaAnnotation(Component.class.getName())) {
+                            AbstractBeanDefinition bd = BeanDefinitionBuilder.genericBeanDefinition(reader.getClassMetadata().getClassName()).getBeanDefinition();
+                            if (configurableListableBeanFactory instanceof DefaultListableBeanFactory) {
+                                DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) configurableListableBeanFactory;
+                                String name = generator.generateBeanName(bd, beanFactory);
+                                beanFactory.registerBeanDefinition(name, bd);
+                            }
+                        }
+                    }
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean4.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean4.java
new file mode 100644
--- /dev/null	(date 1648349498150)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean4.java	(date 1648349498150)
@@ -0,0 +1,14 @@
+package com.study.springstudy.c05BeanFacPostProces.component;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+
+public class Bean4 {
+
+    private static final Logger log = LoggerFactory.getLogger(Bean4.class);
+
+    public Bean4() {
+        log.debug("我被 Spring 管理啦");
+    }
+}
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean3.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean3.java
new file mode 100644
--- /dev/null	(date 1648349837054)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/component/Bean3.java	(date 1648349837054)
@@ -0,0 +1,16 @@
+package com.study.springstudy.c05BeanFacPostProces.component;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+import org.springframework.stereotype.Controller;
+
+@Controller
+public class Bean3 {
+
+    private static final Logger log = LoggerFactory.getLogger(Bean3.class);
+
+    public Bean3() {
+        log.debug("我被 Spring 管理啦");
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/capture2/TestDeadLock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.study.multithread.capture2;\r\n\r\nimport com.study.multithread.capture1.Sleeper;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.Random;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\npublic class TestDeadLock {\r\n    public static void main(String[] args) {\r\n        Chopsticks c1 = new Chopsticks(\"1\");\r\n        Chopsticks c2 = new Chopsticks(\"2\");\r\n        Chopsticks c3 = new Chopsticks(\"3\");\r\n        Chopsticks c4 = new Chopsticks(\"4\");\r\n        Chopsticks c5 = new Chopsticks(\"5\");\r\n\r\n        new Philospher(\"a\",c1,c2).start();\r\n        new Philospher(\"b\",c2,c3).start();\r\n        new Philospher(\"c\",c3,c4).start();\r\n        new Philospher(\"d\",c4,c5).start();\r\n        new Philospher(\"e\",c5,c1).start();\r\n\r\n    }\r\n}\r\n\r\n@Slf4j(topic = \"c.Philospher\")\r\nclass Philospher extends Thread{\r\n    Chopsticks left;\r\n    Chopsticks right;\r\n\r\n    public Philospher(String name, Chopsticks left, Chopsticks right) {\r\n        super(name);\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void run() {\r\n        while (true) {\r\n            if (left.tryLock()){\r\n                try {\r\n                    if (right.tryLock()){\r\n                        try {\r\n                            eat();\r\n                        }finally {\r\n                            right.unlock();\r\n                        }\r\n                    }\r\n\r\n                }finally {\r\n                    left.unlock();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Random random = new Random();\r\n\r\n    private void eat(){\r\n        log.debug(\"eat\");\r\n        Sleeper.sleep(random.nextInt(1));\r\n    }\r\n}\r\n\r\n\r\nclass Chopsticks extends ReentrantLock {\r\n    String name;\r\n\r\n    public Chopsticks(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Chopsticks{\" +\r\n                \"name='\" + name + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture2/TestDeadLock.java b/../multi-thread/src/main/java/com/study/multithread/capture2/TestDeadLock.java
--- a/../multi-thread/src/main/java/com/study/multithread/capture2/TestDeadLock.java	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture2/TestDeadLock.java	(date 1646059921304)
@@ -3,6 +3,8 @@
 import com.study.multithread.capture1.Sleeper;
 import lombok.extern.slf4j.Slf4j;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -19,7 +21,8 @@
         new Philospher("c",c3,c4).start();
         new Philospher("d",c4,c5).start();
         new Philospher("e",c5,c1).start();
-
+        List<Integer> res = new ArrayList<>();
+        res.toArray();
     }
 }
 
Index: ../multi-thread/src/main/java/com/study/multithread/capture2/singleton/Singleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture2/singleton/Singleton.java b/../multi-thread/src/main/java/com/study/multithread/capture2/singleton/Singleton.java
new file mode 100644
--- /dev/null	(date 1639900686178)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture2/singleton/Singleton.java	(date 1639900686178)
@@ -0,0 +1,5 @@
+package com.study.multithread.capture2.singleton;
+
+public enum Singleton {
+    INSANCE;
+}
Index: ../multi-thread/src/main/java/com/study/multithread/capture3/TestPool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture3/TestPool.java b/../multi-thread/src/main/java/com/study/multithread/capture3/TestPool.java
new file mode 100644
--- /dev/null	(date 1644407817032)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture3/TestPool.java	(date 1644407817032)
@@ -0,0 +1,184 @@
+package com.study.multithread.capture3;
+
+import lombok.extern.slf4j.Slf4j;
+
+import java.util.ArrayDeque;
+import java.util.Deque;
+import java.util.HashSet;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.ReentrantLock;
+
+@Slf4j(topic = "c.TestPool")
+public class TestPool {
+
+    public static void main(String[] args) {
+        ThreadPool threadPool = new ThreadPool(2, 2000, TimeUnit.MILLISECONDS, 10);
+        for (int i = 0; i < 5; i++) {
+            int j = i;
+            threadPool.execute(()->{
+                log.debug("{}",j);
+            });
+        }
+    }
+}
+@Slf4j(topic = "c.ThreadPool")
+class ThreadPool{
+    private BlockingQueue<Runnable> taskQueue;
+
+    private HashSet<Worker> workers = new HashSet();
+    // 核心线程数
+    private int coreSize;
+
+    // 设置超时时间
+    private long timeout;
+
+    private TimeUnit timeUnit;
+
+    public ThreadPool(int coreSize, long timeout, TimeUnit timeUnit,int queueCapacity) {
+        this.coreSize = coreSize;
+        this.timeout = timeout;
+        this.timeUnit = timeUnit;
+        this.taskQueue = new BlockingQueue<>(queueCapacity);
+    }
+
+    public void execute(Runnable task) {
+        // 当任务数没有超过 coreSize 时，直接交给 worker 对象执行
+        // 当任务数超过 coreSize 时，加入任务队列暂列
+        synchronized (workers) {
+            if (workers.size() < coreSize) {
+                Worker worker = new Worker(task);
+                log.debug("新增worker:{},{}",worker,task);
+                workers.add(worker);
+                worker.start();
+            } else {
+                log.debug("加入任务队列，{}",task);
+                taskQueue.put(task);
+            }
+        }
+    }
+
+    class Worker extends Thread{
+        private Runnable task;
+
+        public Worker(Runnable task) {
+            this.task = task;
+        }
+
+        @Override
+        public void run() {
+            // 执行任务
+            // 1.当task不为空，直接执行任务
+            // 2.当task执行完毕，接着从任务队列获取任务并执行
+//            while (task != null || (task = taskQueue.take()) != null) {
+            while (task != null || (task = taskQueue.poll(timeout,timeUnit)) != null) {
+                try {
+                    log.debug("正在执行--->{}",task);
+                    task.run();
+                } catch (Exception e){
+                    e.printStackTrace();
+                } finally {
+                    task = null;
+                }
+            }
+            synchronized (workers) {
+                log.debug("worker被移除 {}",this);
+                workers.remove(this);
+            }
+
+
+        }
+    }
+}
+
+
+
+class BlockingQueue<T>{
+    private Deque<T> queue = new ArrayDeque<>();
+
+    // 锁
+    private ReentrantLock lock = new ReentrantLock();
+
+    // 生产者条件变量
+    private Condition fullWaitSet = lock.newCondition();
+    // 消费者条件变量
+    private Condition emptyWaitSet = lock.newCondition();
+
+    private int capacity;
+
+    public BlockingQueue(int capacity) {
+        this.capacity = capacity;
+    }
+
+    // 带超时的阻塞获取
+    public T poll(long timeout, TimeUnit timeUnit) {
+        lock.lock();
+        try {
+            // 将 timeout 统一转换为纳秒
+            long nanos = timeUnit.toNanos(timeout);
+            while (queue.isEmpty()) {
+                try {
+                    // 返回剩余时间
+                    if (nanos <= 0) {
+                        return null;
+                    }
+                    nanos = emptyWaitSet.awaitNanos(nanos);
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+            T t = queue.removeFirst();
+            fullWaitSet.signal();
+            return t;
+        } finally {
+            lock.unlock();
+        }
+    }
+
+    // 阻塞获取
+    public T take() {
+        lock.lock();
+        try {
+            while (queue.isEmpty()) {
+                try {
+                    emptyWaitSet.await();
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+            T t = queue.removeFirst();
+            fullWaitSet.signal();
+            return t;
+        } finally {
+            lock.unlock();
+        }
+    }
+
+    public void put(T element) {
+        lock.lock();
+        try {
+            while (queue.size() == capacity) {
+                try {
+                    fullWaitSet.await();
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+            queue.addLast(element);
+            emptyWaitSet.signal();
+
+        }finally {
+
+        }
+    }
+
+    // 获取大小
+    public int size() {
+        lock.lock();
+        try {
+            return capacity;
+        }finally {
+            lock.unlock();
+        }
+    }
+}
\ No newline at end of file
Index: ../multi-thread/src/main/java/com/study/multithread/capture3/Account.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture3/Account.java b/../multi-thread/src/main/java/com/study/multithread/capture3/Account.java
new file mode 100644
--- /dev/null	(date 1640085553965)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture3/Account.java	(date 1640085553965)
@@ -0,0 +1,11 @@
+package com.study.multithread.capture3;
+
+public interface Account {
+    Integer balance();
+
+    void withdraw(Integer mount);
+
+    static void main(Account account){
+         
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/capture3/ThreadTimer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture3/ThreadTimer.java b/../multi-thread/src/main/java/com/study/multithread/capture3/ThreadTimer.java
new file mode 100644
--- /dev/null	(date 1647693930694)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture3/ThreadTimer.java	(date 1647693930694)
@@ -0,0 +1,25 @@
+package com.study.multithread.capture3;
+
+import lombok.extern.slf4j.Slf4j;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
+
+import static com.study.multithread.capture1.Sleeper.sleep;
+
+@Slf4j(topic = "c.ThreadTimer")
+public class ThreadTimer {
+    public static void main(String[] args) {
+        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5);
+        scheduledExecutorService.schedule(()->{
+            log.debug("task1");
+            sleep(2);
+        }, 1000, TimeUnit.SECONDS);
+
+
+        scheduledExecutorService.schedule(()->{
+            log.debug("task2");
+        }, 1000, TimeUnit.SECONDS);
+    }
+}
Index: ../multi-thread/src/main/java/com/study/multithread/capture3/ThreadDead.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture3/ThreadDead.java b/../multi-thread/src/main/java/com/study/multithread/capture3/ThreadDead.java
new file mode 100644
--- /dev/null	(date 1646321463260)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture3/ThreadDead.java	(date 1646321463260)
@@ -0,0 +1,38 @@
+package com.study.multithread.capture3;
+
+import lombok.extern.slf4j.Slf4j;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+@Slf4j(topic = "c.ThreadDead")
+public class ThreadDead {
+    static final List<String> MENU = Arrays.asList("a","b","c","d");
+    static Random RANDOM = new Random();
+    static String cooking(){
+        return MENU.get(RANDOM.nextInt(MENU.size()));}
+
+    public static void main(String[] args) {
+        ExecutorService pool = Executors.newFixedThreadPool(2);
+
+        pool.execute(()->{
+            log.debug("dealing with...");
+            Future<String> f = pool.submit(() -> {
+                log.debug("cooking");
+                return cooking();
+            });
+            try {
+                log.debug("go {}",f.get());
+            } catch (InterruptedException | ExecutionException e) {
+                e.printStackTrace();
+            }
+        });
+
+        
+    }
+}
Index: ../multi-thread/src/main/resources/1
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/resources/1 b/../multi-thread/src/main/resources/1
new file mode 100644
--- /dev/null	(date 1645666545650)
+++ b/../multi-thread/src/main/resources/1	(date 1645666545650)
@@ -0,0 +1,261 @@
+YANG SHUO 168
+HONG RUN 06
+LI JIANG FENG GUANG HAO
+ZHEN LONG8HAO
+HONG RUN 08
+FU DA JING RUI 02 HAO
+FU DA JING RUI 01 HAO
+MING ZHU 08 HAO
+YANG SHUO YUE GUANG 06
+GUI LIN FENG GUANG HAO
+GUI JIANG 1801
+GUI JIANG 1802
+LI JIANG MING XING HAO
+LI TOU103
+LI TOU105
+LI TOU107
+LI JIANG WEI SHI
+HONG RUN01
+HONG RUN02
+HONG RUN03
+HONG RUN93
+AN JI19
+MIN LE69
+MING ZHU09HAO
+LI TOU188
+LI TOU168
+LI TOU118
+FENG GUANG HE XING HAO
+HAI XUN10721
+HAI XUN10722
+HAI XUN10723
+HAI XUN10703
+HAI XUN10702
+HAI XUN10701
+HAI XUN10705
+HAI XUN10706
+HAI XUN10707
+HAI XUN10708
+XIN QU SHUI XI02HAO
+XIN QU SHUI XI01HAO
+QING ZE
+SHENG LONG66
+WAN SHOU689
+HONG FA06
+QING LÜ08
+HONG FA617
+HONG FA1608
+SHUN LI616
+SHUN LI16
+HONG CHUAN618
+YANG SHUO XIANG YU16
+HONG CHUAN68
+YIN HE189
+YANG SHUO HONG FA08
+SHUN FA19
+FU HAO168
+YIN HE668
+GUI LIN JIU ZHOU1HAO
+WAN SHOU16
+WAN SHOU18
+MU LONG HU058
+LI JIANG DA BAO BU
+MU LONG HU065
+MU LONG HU055
+MU LONG HU056
+MU LONG HU057
+XIN AO HAO
+MU LONG HU067
+MU LONG HU068
+MU LONG HU012
+MU LONG HU011
+MU LONG HU010
+MU LONG HU075
+MU LONG HU076
+MU LONG HU091
+MU LONG HU090
+MU LONG HU079
+MU LONG HU092
+MU LONG HU093
+MU LONG HU095
+MU LONG HU096
+MU LONG HU097
+MU LONG HU098
+LIANG JIANG SI HU008
+LIANG JIANG SI HU017
+LIANG JIANG SI HU018
+LIANG JIANG SI HU019
+LIANG JIANG SI HU020
+LIANG JIANG SI HU009
+LIANG JIANG SI HU015
+LIANG JIANG SI HU016
+LI JIANG ZHI MENG HAO
+MU LONG HU035
+MU LONG HU033
+MU LONG HU032
+MU LONG HU037
+MU LONG HU080
+MU LONG HU083
+LIANG JIANG SI HU HUA FANG82
+LIANG JIANG SI HU HUA FANG81
+MU LONG HU013
+YIN GUI HAO
+HUA SHAN
+GE LI SI SHI SHANG HAO
+GE LI SI YOU YA HAO
+GUI LIN LÜ YOU1HAO
+DU XIU1HAO
+YU CHAI17HAO
+HUA XIN8HAO
+JIN TIAN XIA LÜ YOU8HAO
+GUI LIN LÜ YOU11HAO
+JIN TIAN XIA LÜ YOU6HAO
+GUI LIN LÜ YOU8HAO
+GUI LIN LÜ YOU5HAO
+QI DI GUI LIN HAO
+GUI LIN LÜ YOU6HAO
+YU CHAI16HAO
+GUI LIN LÜ YOU15HAO
+GUI LIN LÜ YOU16HAO
+GUI LIN LÜ YOU20HAO
+GUI LIN LÜ YOU17HAO
+GUI LIN LÜ YOU21HAO
+GUI LIN LÜ YOU24HAO
+SHENG JING HAO
+DI JING HAO
+GUI LIN LÜ YOU25HAO
+GUI LIN LÜ YOU HAO
+GUI LIN LÜ YOU32HAO
+GUI LIN LÜ YOU31HAO
+YU CHAI18HAO
+GUI LIN LÜ YOU19HAO
+GUI LIN LÜ YOU18HAO
+GUI LIN LÜ YOU10HAO
+GUI LIN LÜ YOU9HAO
+GUI LIN LÜ YOU22HAO
+GUI LIN LÜ YOU23HAO
+GUI LIN LÜ YOU26HAO
+GUI LIN LÜ YOU33HAO
+GUI LIN LÜ YOU28HAO
+GUI LIN LÜ YOU30HAO
+GUI LIN LÜ YOU29HAO
+GUI LIN LÜ YOU27HAO
+DING SHUN2HAO
+YUAN TAI1HAO
+YUAN TAI8HAO
+DING SHUN1HAO
+YUAN TAI2HAO
+YUAN TAI6HAO
+HONG TAI68
+HAO SHENG33
+HAO SHENG16
+HAO SHENG25
+HAO SHENG27
+HAO SHENG18
+HAO SHENG1HAO
+HAO SHENG15
+HAO SHENG03
+HAO SHENG13
+HAO SHENG88
+HAO SHENG81
+HAO SHENG23
+HAO SHENG6HAO
+HAO SHENG26
+HAO SHENG19
+HAO SHENG66
+HAO SHENG09
+HAO SHENG68
+HAO SHENG21
+HAO SHENG86
+HAO SHENG11
+HAO SHENG28
+GUAN GUANG26HAO
+GUAN GUANG2HAO
+GUAN GUANG8HAO
+GUAN GUANG9HAO
+JUN4 DA1HAO
+JUN4 DA2HAO
+GUAN GUANG1HAO
+GUAN GUANG701
+GUAN GUANG18HAO
+GUAN GUANG19HAO
+GUAN GUANG6HAO
+JUN4 DA ZHI MENG
+JUN4 DA JIA YOU CHUAN
+YANG HANG09
+YANG HANG05
+YANG HANG08
+YANG HANG29
+YANG HANG15
+YANG HANG18
+YANG HANG26
+YANG HANG28
+YANG HANG30
+YANG HANG19
+YANG HANG66
+JIU DING18
+MIN LE68
+YANG SHUO XIN YUAN HAO
+HENG YUAN88
+YONG JIANG66
+LIAN FENG18
+HONG GUI66
+LIAN FA699
+GUI YANG18
+HENG YUAN16
+YANG SHUO HONG XIANG68
+HONG DA08
+HONG DA06
+HONG DA68
+LIAN FA698
+YONG ZHOU168
+YANG SHUO HONG XIANG168
+YANG SHUO FENG SHENG66
+YANG SHUO FENG SHENG68
+YANG SHUO HONG XING108
+YANG SHUO HONG XING106
+YANG SHUO HONG XING268
+YANG SHUO HONG XING266
+YANG SHUO HONG XING178
+YANG SHUO HONG XING269
+YANG SHUO HONG XING109
+YANG SHUO HONG XING168
+YANG SHUO LI XING188
+YANG SHUO LI XING126
+YANG SHUO LI XING167
+YANG SHUO LI XING199
+YANG SHUO LI XING618
+YANG SHUO LI XING619
+YANG SHUO LI XING628
+YANG SHUO LI XING118
+YANG SHUO LI XING288
+YANG SHUO LI XING007
+YANG SHUO LI XING518
+YANG SHUO LI XING228
+YANG SHUO LI XING688
+YANG SHUO LI XING218
+YANG SHUO LI XING268
+YANG SHUO YU CUN1HAO
+YANG SHUO LI XING002
+YANG SHUO LI XING658
+YANG SHUO LI XING659
+YANG SHUO LI XING758
+YANG SHUO LI XING668
+YANG SHUO LI XING669
+YANG SHUO LI XING667
+YANG SHUO LI XING198
+YANG SHUO LI XING568
+YANG SHUO LI XING589
+AN JI189
+JIN ZHI YUN07
+JIN ZHI YUN08
+JIN ZHI YUN09
+LIANG JIANG SI HU
+LI JIANG DA BAO BU1HAO
+YIN ZI YAN
+ZI YUAN DAN XIA
+LONG JI WEN QUAN
+XIANG SHAN001
+XIANG SHAN002
+XIANG SHAN003
+GUI YANG16
Index: ../multi-thread/src/main/java/com/study/multithread/capture3/Conn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/multithread/capture3/Conn.java b/../multi-thread/src/main/java/com/study/multithread/capture3/Conn.java
new file mode 100644
--- /dev/null	(date 1645713808381)
+++ b/../multi-thread/src/main/java/com/study/multithread/capture3/Conn.java	(date 1645713808381)
@@ -0,0 +1,362 @@
+package com.study.multithread.capture3;
+
+import lombok.extern.slf4j.Slf4j;
+
+import java.sql.*;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Random;
+import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicIntegerArray;
+
+@Slf4j(topic = "c.Conn")
+public class Conn {
+    public static void main(String[] args) {
+        Pool pool = new Pool(2);
+        for (int i = 0; i < 5; i++) {
+            new Thread(()->{
+                Connection conn = pool.borrow();
+                try {
+                    Thread.sleep(new Random().nextInt(1000));
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+                pool.free(conn);
+            }).start();
+        }
+    }
+}
+
+@Slf4j(topic = "c.Pool")
+class Pool{
+    // 连接池的大小
+    private final int poolSize;
+    // 连接对象数组
+    private Connection[] connections;
+    // 每个连接的状态 0空闲 1繁忙
+    private AtomicIntegerArray states;
+
+    public Pool(int poolSize) {
+        this.poolSize = poolSize;
+        this.connections = new Connection[poolSize];
+        this.states = new AtomicIntegerArray(new int[poolSize]);
+        for (int i = 0; i < poolSize; i++) {
+            connections[i] = new MockConnection("连接" + (i + 1));
+        }
+    }
+
+    public Connection borrow(){
+        while (true) {
+            for (int i = 0; i < poolSize; i++) {
+                // 获取空闲连接
+                if (states.get(i)==0) {
+                    if (states.compareAndSet(i, 0, 1)) {
+                        log.debug("borrow {}",connections[i]);
+                        return connections[i];
+                    }
+                }
+            }
+            // 如果没有空闲连接，当前线程进入等待
+            synchronized (this) {
+                try {
+                    log.debug("wait");
+                    this.wait();
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    public void free(Connection connection) {
+        for (int i = 0; i < poolSize; i++) {
+            if (connections[i] == connection) {
+                // 归还连接的线程就是线程的持有者， 所以不用cas
+                states.set(i, 0);
+                synchronized (this) {
+                    log.debug("free {}",connection);
+                    this.notifyAll();
+                }
+                break;
+            }
+        }
+    }
+}
+
+class MockConnection implements Connection {
+    private String name;
+
+    public MockConnection(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public Statement createStatement() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public PreparedStatement prepareStatement(String sql) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public CallableStatement prepareCall(String sql) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public String nativeSQL(String sql) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void setAutoCommit(boolean autoCommit) throws SQLException {
+
+    }
+
+    @Override
+    public boolean getAutoCommit() throws SQLException {
+        return false;
+    }
+
+    @Override
+    public void commit() throws SQLException {
+
+    }
+
+    @Override
+    public void rollback() throws SQLException {
+
+    }
+
+    @Override
+    public void close() throws SQLException {
+
+    }
+
+    @Override
+    public boolean isClosed() throws SQLException {
+        return false;
+    }
+
+    @Override
+    public DatabaseMetaData getMetaData() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void setReadOnly(boolean readOnly) throws SQLException {
+
+    }
+
+    @Override
+    public boolean isReadOnly() throws SQLException {
+        return false;
+    }
+
+    @Override
+    public void setCatalog(String catalog) throws SQLException {
+
+    }
+
+    @Override
+    public String getCatalog() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void setTransactionIsolation(int level) throws SQLException {
+
+    }
+
+    @Override
+    public int getTransactionIsolation() throws SQLException {
+        return 0;
+    }
+
+    @Override
+    public SQLWarning getWarnings() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void clearWarnings() throws SQLException {
+
+    }
+
+    @Override
+    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Map<String, Class<?>> getTypeMap() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
+
+    }
+
+    @Override
+    public void setHoldability(int holdability) throws SQLException {
+
+    }
+
+    @Override
+    public int getHoldability() throws SQLException {
+        return 0;
+    }
+
+    @Override
+    public Savepoint setSavepoint() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Savepoint setSavepoint(String name) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void rollback(Savepoint savepoint) throws SQLException {
+
+    }
+
+    @Override
+    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
+
+    }
+
+    @Override
+    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Clob createClob() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Blob createBlob() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public NClob createNClob() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public SQLXML createSQLXML() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public boolean isValid(int timeout) throws SQLException {
+        return false;
+    }
+
+    @Override
+    public void setClientInfo(String name, String value) throws SQLClientInfoException {
+
+    }
+
+    @Override
+    public void setClientInfo(Properties properties) throws SQLClientInfoException {
+
+    }
+
+    @Override
+    public String getClientInfo(String name) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Properties getClientInfo() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void setSchema(String schema) throws SQLException {
+
+    }
+
+    @Override
+    public String getSchema() throws SQLException {
+        return null;
+    }
+
+    @Override
+    public void abort(Executor executor) throws SQLException {
+
+    }
+
+    @Override
+    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
+
+    }
+
+    @Override
+    public int getNetworkTimeout() throws SQLException {
+        return 0;
+    }
+
+    @Override
+    public <T> T unwrap(Class<T> iface) throws SQLException {
+        return null;
+    }
+
+    @Override
+    public boolean isWrapperFor(Class<?> iface) throws SQLException {
+        return false;
+    }
+}
\ No newline at end of file
Index: ../multi-thread/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=5432
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../multi-thread/src/main/resources/application.properties b/../multi-thread/src/main/resources/application.properties
--- a/../multi-thread/src/main/resources/application.properties	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
+++ b/../multi-thread/src/main/resources/application.properties	(date 1648035928392)
@@ -1,1 +1,1 @@
-server.port=5432
\ No newline at end of file
+server.port=5432
Index: ../multi-thread/src/main/resources/logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/resources/logback-spring.xml b/../multi-thread/src/main/resources/logback-spring.xml
new file mode 100644
--- /dev/null	(date 1639117055756)
+++ b/../multi-thread/src/main/resources/logback-spring.xml	(date 1639117055756)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Copyright (c) 2020 pig4cloud Authors. All Rights Reserved.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<configuration debug="false" scan="false">
+    <springProperty scop="context" name="spring.application.name" source="spring.application.name" defaultValue=""/>
+    <property name="log.path" value="logs/${spring.application.name}"/>
+    <!-- 彩色日志格式 -->
+    <property name="CONSOLE_LOG_PATTERN"
+              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
+    <!-- 彩色日志依赖的渲染类 -->
+    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
+    <conversionRule conversionWord="wex"
+                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
+    <conversionRule conversionWord="wEx"
+                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
+    <!-- Console log output -->
+    <appender name="c" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
+        </encoder>
+    </appender>
+
+
+</configuration>
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/MapperPostProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/MapperPostProcessor.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/MapperPostProcessor.java
new file mode 100644
--- /dev/null	(date 1648388047182)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/MapperPostProcessor.java	(date 1648388047182)
@@ -0,0 +1,50 @@
+package com.study.springstudy.c05BeanFacPostProces;
+
+import org.mybatis.spring.mapper.MapperFactoryBean;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.AbstractBeanDefinition;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
+import org.springframework.context.annotation.AnnotationBeanNameGenerator;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
+import org.springframework.core.type.ClassMetadata;
+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;
+import org.springframework.core.type.classreading.MetadataReader;
+
+import java.io.IOException;
+
+public class MapperPostProcessor implements BeanDefinitionRegistryPostProcessor {
+    @Override
+    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry beanFactory) throws BeansException {
+        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
+        try {
+            Resource[] resources = resolver.getResources("classpath*:com/study/springstudy/c05BeanFacPostProces/mapper/**/*.class");
+            AnnotationBeanNameGenerator generator = new AnnotationBeanNameGenerator();
+            CachingMetadataReaderFactory factory = new CachingMetadataReaderFactory();
+            for (Resource resource : resources) {
+                MetadataReader reader = factory.getMetadataReader(resource);
+                ClassMetadata classMetadata = reader.getClassMetadata();
+                if (classMetadata.isInterface()) {
+                    AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(MapperFactoryBean.class)
+                            .addConstructorArgValue(classMetadata.getClassName())
+                            .setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE)
+                            .getBeanDefinition();
+                    AbstractBeanDefinition bd2 = BeanDefinitionBuilder.genericBeanDefinition(classMetadata.getClassName()).getBeanDefinition();
+
+                    String name = generator.generateBeanName(bd2, beanFactory);  // 根据beanDefinition处理
+                    beanFactory.registerBeanDefinition(name, beanDefinition);
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
+
+    }
+}
Index: src/main/java/com/study/springstudy/c02ContainerImpl/A02Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c02ContainerImpl/A02Application.java b/src/main/java/com/study/springstudy/c02ContainerImpl/A02Application.java
new file mode 100644
--- /dev/null	(date 1648132070624)
+++ b/src/main/java/com/study/springstudy/c02ContainerImpl/A02Application.java	(date 1648132070624)
@@ -0,0 +1,133 @@
+package com.study.springstudy.c02ContainerImpl;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
+import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean;
+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
+import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;
+import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+import org.springframework.context.support.FileSystemXmlApplicationContext;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.FileSystemResource;
+import org.springframework.web.servlet.DispatcherServlet;
+import org.springframework.web.servlet.ModelAndView;
+import org.springframework.web.servlet.mvc.Controller;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+@Slf4j
+public class A02Application {
+
+    public static void main(String[] args) {
+//        testClassPathXmlApplicationContext();
+//        testFileSystemXmlApplicationContext()
+        // -->非web环境下spring配置bean的方式
+//        testAnnotationConfigApplicationContext();;
+        // -->web环境下spring的配置bean方式
+        testAnnotationConfigServletWebServerApplicationContext();
+        /*DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
+        System.out.println("read before=====");
+        for (String name : beanFactory.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);
+        System.out.println("read after=====");
+//        reader.loadBeanDefinitions(new ClassPathResource("b01.xml"));
+        reader.loadBeanDefinitions(new FileSystemResource("src\\main\\resources\\b01.xml"));
+        for (String name : beanFactory.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }*/
+
+
+
+
+    }
+    // 基于 classpath 下 xml格式的配置文件来创建
+    public static void testClassPathXmlApplicationContext(){
+        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("b01.xml");
+        for (String name : context.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+        System.out.println(context.getBean(Bean2.class).getBean1());
+    }
+    // 基于磁盘路径下 xml个格式的配置文件创建
+    public static void testFileSystemXmlApplicationContext(){
+        FileSystemXmlApplicationContext context = new FileSystemXmlApplicationContext("F:\\java\\code\\2021\\highPerProgram\\spring-study\\src\\main\\resources\\b01.xml");
+        for (String name : context.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+    }
+    // 基于 java 配置类来创建
+    public static void testAnnotationConfigApplicationContext(){
+        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);
+        for (String name : context.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+        System.out.println(context.getBean(Bean2.class).getBean1());
+    }
+    // 基于 java 配置类来创建，用于web环境
+    public static void testAnnotationConfigServletWebServerApplicationContext(){
+        AnnotationConfigServletWebServerApplicationContext context = new
+                AnnotationConfigServletWebServerApplicationContext(WebConfig.class);
+    }
+    @Configuration
+    static class WebConfig{
+        // 内嵌容器
+        @Bean
+        public ServletWebServerFactory servletWebServerFactory() {
+            return new TomcatServletWebServerFactory();
+        }
+
+        @Bean
+        public DispatcherServlet dispatcherServlet() {
+            return new DispatcherServlet();
+        }
+
+        // 注册dispatchServlet到tomcat服务器
+        @Bean
+        public DispatcherServletRegistrationBean registrationBean(DispatcherServlet dispatcherServlet) {
+            return new DispatcherServletRegistrationBean(dispatcherServlet, "/");   // 提供path路径进行注册
+        }
+
+        @Bean("/hello")
+        public Controller controller1() {
+            return (request, response) -> {
+                response.getWriter().print("hello");
+                return null;
+            };
+        }
+    }
+
+    static class Bean1{}
+    @Configuration
+    static class Config{
+        @Bean
+        public Bean1 bean1(){return new Bean1();}
+        @Bean
+        public Bean2 bean2(Bean1 bean1){
+            Bean2 bean2 = new Bean2();
+            bean2.setBean1(bean1);
+            return bean2;
+        }
+    }
+    static class Bean2{
+        private Bean1 bean1;
+
+        public void setBean1(Bean1 bean1) {
+            this.bean1 = bean1;
+        }
+
+        public Bean1 getBean1() {
+            return bean1;
+        }
+    }
+
+
+
+}
Index: src/main/resources/b01.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/b01.xml b/src/main/resources/b01.xml
new file mode 100644
--- /dev/null	(date 1648132092469)
+++ b/src/main/resources/b01.xml	(date 1648132092469)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:context="http://www.springframework.org/schema/context"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
+
+
+    <bean id="bean1" class="com.study.springstudy.c02ContainerImpl.A02Application.Bean1"/>
+    <bean id="bean2" class="com.study.springstudy.c02ContainerImpl.A02Application.Bean2">
+        <property name="bean1" ref="bean1"/>
+    </bean>
+    <!--bean和beanFactory的后处理器-->
+    <context:annotation-config/>
+</beans>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c09ajc/C09Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c09ajc/C09Application.java b/src/main/java/com/study/springstudy/c09ajc/C09Application.java
new file mode 100644
--- /dev/null	(date 1650379533997)
+++ b/src/main/java/com/study/springstudy/c09ajc/C09Application.java	(date 1650379533997)
@@ -0,0 +1,21 @@
+package com.study.springstudy.c09ajc;
+
+import com.study.springstudy.c09ajc.service.MyService;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.ConfigurableApplicationContext;
+
+@SpringBootApplication
+@Slf4j
+public class C09Application {
+    public static void main(String[] args) {
+        ConfigurableApplicationContext context = SpringApplication.run(C09Application.class);
+
+        MyService myService = context.getBean(MyService.class);
+        log.debug("service class:{}", myService.getClass());
+        myService.foo();
+
+        context.close();
+    }
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1648035040243)
+++ b/.gitignore	(date 1648035040243)
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
Index: src/main/java/com/study/springstudy/c03BeanAge/TestMethodTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c03BeanAge/TestMethodTemplate.java b/src/main/java/com/study/springstudy/c03BeanAge/TestMethodTemplate.java
new file mode 100644
--- /dev/null	(date 1648132871955)
+++ b/src/main/java/com/study/springstudy/c03BeanAge/TestMethodTemplate.java	(date 1648132871955)
@@ -0,0 +1,36 @@
+package com.study.springstudy.c03BeanAge;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TestMethodTemplate {
+    public static void main(String[] args) {
+        MyBeanFactory beanFactory = new MyBeanFactory();
+        beanFactory.addBeanPostProcessor(bean -> System.out.println("解析 @Autowired"));
+        beanFactory.addBeanPostProcessor(bean -> System.out.println("解析 @Resource"));
+        beanFactory.getBean();
+    }
+
+    static class MyBeanFactory{
+        public Object getBean(){
+            Object bean = new Object();
+            System.out.println("构造=>" + bean);
+            System.out.println("依赖注入=>" + bean);
+            for (BeanPostProcessor procesor : procesors) {
+                procesor.inject(bean);
+            }
+            System.out.println("返回=>" + bean);
+            return bean;
+        }
+        private List<BeanPostProcessor> procesors = new ArrayList<>();
+
+        public void addBeanPostProcessor(BeanPostProcessor processor) {
+            procesors.add(processor);
+        }
+    }
+
+    static interface BeanPostProcessor{
+        public void inject(Object bean); // 对依赖注入的扩展
+    }
+
+}
Index: mvnw
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvnw b/mvnw
new file mode 100644
--- /dev/null	(date 1648035040247)
+++ b/mvnw	(date 1648035040247)
@@ -0,0 +1,316 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Maven Start Up Batch script
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   M2_HOME - location of maven2's installed home dir
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /usr/local/etc/mavenrc ] ; then
+    . /usr/local/etc/mavenrc
+  fi
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "`uname`" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        export JAVA_HOME="`/usr/libexec/java_home`"
+      else
+        export JAVA_HOME="/Library/Java/Home"
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=`java-config --jre-home`
+  fi
+fi
+
+if [ -z "$M2_HOME" ] ; then
+  ## resolve links - $0 may be a link to maven's home
+  PRG="$0"
+
+  # need this for relative symlinks
+  while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+      PRG="$link"
+    else
+      PRG="`dirname "$PRG"`/$link"
+    fi
+  done
+
+  saveddir=`pwd`
+
+  M2_HOME=`dirname "$PRG"`/..
+
+  # make it fully qualified
+  M2_HOME=`cd "$M2_HOME" && pwd`
+
+  cd "$saveddir"
+  # echo Using m2 at $M2_HOME
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --unix "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME="`(cd "$M2_HOME"; pwd)`"
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="`which javac`"
+  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=`which readlink`
+    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
+      if $darwin ; then
+        javaHome="`dirname \"$javaExecutable\"`"
+        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
+      else
+        javaExecutable="`readlink -f \"$javaExecutable\"`"
+      fi
+      javaHome="`dirname \"$javaExecutable\"`"
+      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="`\\unset -f command; \\command -v java`"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=`cd "$wdir/.."; pwd`
+    fi
+    # end of workaround
+  done
+  echo "${basedir}"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    echo "$(tr -s '\n' ' ' < "$1")"
+  fi
+}
+
+BASE_DIR=`find_maven_basedir "$(pwd)"`
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Found .mvn/wrapper/maven-wrapper.jar"
+    fi
+else
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
+    fi
+    if [ -n "$MVNW_REPOURL" ]; then
+      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+    else
+      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+    fi
+    while IFS="=" read key value; do
+      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
+      esac
+    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
+    if [ "$MVNW_VERBOSE" = true ]; then
+      echo "Downloading from: $jarUrl"
+    fi
+    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
+    if $cygwin; then
+      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
+    fi
+
+    if command -v wget > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found wget ... using wget"
+        fi
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        else
+            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        fi
+    elif command -v curl > /dev/null; then
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Found curl ... using curl"
+        fi
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            curl -o "$wrapperJarPath" "$jarUrl" -f
+        else
+            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
+        fi
+
+    else
+        if [ "$MVNW_VERBOSE" = true ]; then
+          echo "Falling back to using Java to download"
+        fi
+        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        # For Cygwin, switch paths to Windows format before running javac
+        if $cygwin; then
+          javaClass=`cygpath --path --windows "$javaClass"`
+        fi
+        if [ -e "$javaClass" ]; then
+            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Compiling MavenWrapperDownloader.java ..."
+                fi
+                # Compiling the Java class
+                ("$JAVA_HOME/bin/javac" "$javaClass")
+            fi
+            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
+                # Running the downloader
+                if [ "$MVNW_VERBOSE" = true ]; then
+                  echo " - Running MavenWrapperDownloader.java ..."
+                fi
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
+if [ "$MVNW_VERBOSE" = true ]; then
+  echo $MAVEN_PROJECTBASEDIR
+fi
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$M2_HOME" ] &&
+    M2_HOME=`cygpath --path --windows "$M2_HOME"`
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
+fi
+
+# Provide a "standardized" way to retrieve the CLI args that will
+# work with both Windows and non-Windows executions.
+MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
+export MAVEN_CMD_LINE_ARGS
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  $MAVEN_DEBUG_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.home=${M2_HOME}" \
+  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
Index: src/main/java/com/study/springstudy/c01/Component1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c01/Component1.java b/src/main/java/com/study/springstudy/c01/Component1.java
new file mode 100644
--- /dev/null	(date 1648133270455)
+++ b/src/main/java/com/study/springstudy/c01/Component1.java	(date 1648133270455)
@@ -0,0 +1,19 @@
+package com.study.springstudy.c01;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationEventPublisher;
+import org.springframework.stereotype.Component;
+
+@Component
+@Slf4j
+public class Component1 {
+
+    @Autowired
+    private ApplicationEventPublisher context;
+
+    public void register(){
+        log.debug("用户注册");
+        context.publishEvent(new UserRegisterEvent(this));
+    }
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1651289990614)
+++ b/pom.xml	(date 1651289990614)
@@ -0,0 +1,169 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>2.5.5</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+    <groupId>com.example</groupId>
+    <artifactId>spring-study</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <name>spring-study</name>
+    <description>spring-study</description>
+    <properties>
+        <java.version>1.8</java.version>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-configuration-processor</artifactId>
+            <optional>true</optional>
+        </dependency>
+
+        <dependency>
+            <groupId>org.aspectj</groupId>
+            <artifactId>aspectjweaver</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mybatis.spring.boot</groupId>
+            <artifactId>mybatis-spring-boot-starter</artifactId>
+            <version>2.2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.alibaba</groupId>
+            <artifactId>druid-spring-boot-starter</artifactId>
+            <version>1.2.8</version>
+        </dependency>
+
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-test</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-freemarker</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.fasterxml.jackson.dataformat</groupId>
+            <artifactId>jackson-dataformat-xml</artifactId>
+        </dependency>
+
+        <!--<dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context-indexer</artifactId>
+            <optional>true</optional>
+        </dependency>-->
+
+        <dependency>
+            <groupId>org.apache.tomcat</groupId>
+            <artifactId>tomcat-dbcp</artifactId>
+            <version>9.0.53</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-cache</artifactId>
+        </dependency>
+
+        <!--<dependency>
+            <groupId>org.apache.tomcat.embed</groupId>
+            <artifactId>tomcat-embed-jasper</artifactId>
+            <scope>provided</scope>
+        </dependency>-->
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>aspectj-maven-plugin</artifactId>
+                <version>1.14.0</version>
+                <configuration>
+                    <complianceLevel>1.8</complianceLevel>
+                    <source>8</source>
+                    <target>8</target>
+                    <showWeaveInfo>true</showWeaveInfo>
+                    <verbose>true</verbose>
+                    <Xlint>ignore</Xlint>
+                    <encoding>UTF-8</encoding>
+
+                </configuration>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>compile</goal>
+                            <goal>test-compile</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+    <repositories>
+        <repository>
+            <id>spring-milestones</id>
+            <name>Spring Milestones</name>
+            <url>https://repo.spring.io/milestone</url>
+            <snapshots>
+                <enabled>false</enabled>
+            </snapshots>
+        </repository>
+        <repository>
+            <id>spring-snapshots</id>
+            <name>Spring Snapshots</name>
+            <url>https://repo.spring.io/snapshot</url>
+            <releases>
+                <enabled>false</enabled>
+            </releases>
+        </repository>
+    </repositories>
+    <pluginRepositories>
+        <pluginRepository>
+            <id>spring-milestones</id>
+            <name>Spring Milestones</name>
+            <url>https://repo.spring.io/milestone</url>
+            <snapshots>
+                <enabled>false</enabled>
+            </snapshots>
+        </pluginRepository>
+        <pluginRepository>
+            <id>spring-snapshots</id>
+            <name>Spring Snapshots</name>
+            <url>https://repo.spring.io/snapshot</url>
+            <releases>
+                <enabled>false</enabled>
+            </releases>
+        </pluginRepository>
+    </pluginRepositories>
+
+</project>
Index: src/main/java/com/study/springstudy/c06Aware/MyBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c06Aware/MyBean.java b/src/main/java/com/study/springstudy/c06Aware/MyBean.java
new file mode 100644
--- /dev/null	(date 1648475484733)
+++ b/src/main/java/com/study/springstudy/c06Aware/MyBean.java	(date 1648475484733)
@@ -0,0 +1,40 @@
+package com.study.springstudy.c06Aware;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.BeanNameAware;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+
+import javax.annotation.PostConstruct;
+
+@Slf4j
+public class MyBean implements BeanNameAware, ApplicationContextAware, InitializingBean {
+
+    @Override
+    public void setBeanName(String name) {
+        log.debug("name is :{} ,当前bean:{}", name, this);
+    }
+
+    @Override
+    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
+        log.debug("context is :{} ,当前bean:{}", applicationContext, this);
+    }
+
+    @Override
+    public void afterPropertiesSet() throws Exception {
+        log.debug("当前bean:"+this+"初始化");
+    }
+
+    @Autowired
+    public void aaa(ApplicationContext context) {
+        log.debug("当前bean:" + this + ",使用@Autowired 容器是" + context);
+    }
+
+    @PostConstruct
+    public void init(){
+        log.debug("当前bean:"+this+"@PostConstruct");
+    }
+}
Index: src/main/java/com/study/springstudy/c06Aware/C06Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c06Aware/C06Application.java b/src/main/java/com/study/springstudy/c06Aware/C06Application.java
new file mode 100644
--- /dev/null	(date 1648476824983)
+++ b/src/main/java/com/study/springstudy/c06Aware/C06Application.java	(date 1648476824983)
@@ -0,0 +1,32 @@
+package com.study.springstudy.c06Aware;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;
+import org.springframework.context.annotation.CommonAnnotationBeanPostProcessor;
+import org.springframework.context.annotation.ConfigurationClassPostProcessor;
+import org.springframework.context.support.GenericApplicationContext;
+
+/**
+ * Aware 接口 InitializingBean
+ */
+@Slf4j
+public class C06Application {
+    public static void main(String[] args) {
+        GenericApplicationContext context = new GenericApplicationContext();
+//        context.registerBean("myBean", MyBean.class);
+
+//        context.registerBean("myConfig1",MyConfig1.class);
+        context.registerBean("myConfig2",MyConfig2.class);
+        context.registerBean(AutowiredAnnotationBeanPostProcessor.class);
+        context.registerBean(CommonAnnotationBeanPostProcessor.class);
+        context.registerBean(ConfigurationClassPostProcessor.class);
+
+        /*
+        * 1.beanFactory 后处理器
+        * 2.添加 Bean 后处理器
+        * 3.初始化单例
+        * */
+        context.refresh();
+        context.close();
+    }
+}
Index: src/main/java/com/study/springstudy/c03BeanAge/C03Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c03BeanAge/C03Application.java b/src/main/java/com/study/springstudy/c03BeanAge/C03Application.java
new file mode 100644
--- /dev/null	(date 1648133270450)
+++ b/src/main/java/com/study/springstudy/c03BeanAge/C03Application.java	(date 1648133270450)
@@ -0,0 +1,13 @@
+package com.study.springstudy.c03BeanAge;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.ConfigurableApplicationContext;
+
+@SpringBootApplication
+public class C03Application {
+    public static void main(String[] args) {
+        ConfigurableApplicationContext context = SpringApplication.run(C03Application.class, args);
+        context.close();
+    }
+}
Index: mvnw.cmd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
--- /dev/null	(date 1648035040242)
+++ b/mvnw.cmd	(date 1648035040242)
@@ -0,0 +1,188 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Maven Start Up Batch script
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM M2_HOME - location of maven2's installed home dir
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
+if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Found %WRAPPER_JAR%
+    )
+) else (
+    if not "%MVNW_REPOURL%" == "" (
+        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
+    )
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Couldn't find %WRAPPER_JAR%, downloading it ...
+        echo Downloading from: %DOWNLOAD_URL%
+    )
+
+    powershell -Command "&{"^
+		"$webclient = new-object System.Net.WebClient;"^
+		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
+		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
+		"}"^
+		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
+		"}"
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Finished downloading %WRAPPER_JAR%
+    )
+)
+@REM End of extension
+
+@REM Provide a "standardized" way to retrieve the CLI args that will
+@REM work with both Windows and non-Windows executions.
+set MAVEN_CMD_LINE_ARGS=%*
+
+%MAVEN_JAVA_EXE% ^
+  %JVM_CONFIG_MAVEN_PROPS% ^
+  %MAVEN_OPTS% ^
+  %MAVEN_DEBUG_OPTS% ^
+  -classpath %WRAPPER_JAR% ^
+  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
+  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
+if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%"=="on" pause
+
+if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
+
+cmd /C exit /B %ERROR_CODE%
Index: src/main/java/com/study/springstudy/c03BeanAge/MyBeanPostProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c03BeanAge/MyBeanPostProcessor.java b/src/main/java/com/study/springstudy/c03BeanAge/MyBeanPostProcessor.java
new file mode 100644
--- /dev/null	(date 1648135513975)
+++ b/src/main/java/com/study/springstudy/c03BeanAge/MyBeanPostProcessor.java	(date 1648135513975)
@@ -0,0 +1,63 @@
+package com.study.springstudy.c03BeanAge;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.BeansException;
+import org.springframework.beans.PropertyValues;
+import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;
+import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;
+import org.springframework.stereotype.Component;
+
+
+@Slf4j
+@Component
+public class MyBeanPostProcessor implements InstantiationAwareBeanPostProcessor, DestructionAwareBeanPostProcessor {
+
+
+    @Override
+    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {
+        if (beanName.equals("lifeCycleBean")) {
+            log.debug("<<< 实例化之前执行，返回对象替换原本的bean");
+        }
+        return null;
+    }
+
+    @Override
+    public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {
+        if (beanName.equals("lifeCycleBean")) {
+            log.debug("<<< 实例化之后执行，返回false跳过依赖注入阶段");
+        }
+        return true;
+    }
+
+    @Override
+    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) throws BeansException {
+        if (beanName.equals("lifeCycleBean")) {
+            log.debug("<<< 依赖注入阶段执行，如@Autowired @Value @Resource");
+        }
+        return pvs;
+    }
+
+
+    @Override
+    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
+        if (beanName.equals("lifeCycleBean")) {
+            log.debug("<<< 初始化之前执行，返回的对象会替换原来的bean，如@PostConstruct @ConfigurationProperties");
+        }
+        return bean;
+    }
+
+    @Override
+    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
+        if (beanName.equals("lifeCycleBean")) {
+            log.debug("<<< 初始化之后执行，返回的对象会替换原来的bean，如代理增强");
+        }
+        return bean;
+    }
+
+    @Override
+    public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException {
+        if (beanName.equals("lifeCycleBean")) {
+            log.debug("<<< 销毁之前执行，如@PreDestory");
+        }
+    }
+}
Index: .mvn/wrapper/maven-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
--- /dev/null	(date 1648035040246)
+++ b/.mvn/wrapper/maven-wrapper.properties	(date 1648035040246)
@@ -0,0 +1,2 @@
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.zip
+wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar
Index: src/main/java/com/study/springstudy/c03BeanAge/LifeCycleBean.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c03BeanAge/LifeCycleBean.java b/src/main/java/com/study/springstudy/c03BeanAge/LifeCycleBean.java
new file mode 100644
--- /dev/null	(date 1648134198612)
+++ b/src/main/java/com/study/springstudy/c03BeanAge/LifeCycleBean.java	(date 1648134198612)
@@ -0,0 +1,34 @@
+package com.study.springstudy.c03BeanAge;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import javax.annotation.PostConstruct;
+import javax.annotation.PreDestroy;
+
+@Component
+public class LifeCycleBean {
+    public static final Logger log = LoggerFactory.getLogger(LifeCycleBean.class);
+
+    public LifeCycleBean() {
+        log.debug("构造");
+    }
+
+    @Autowired
+    public void autowire() {
+        log.debug("依赖注入：{}", 123);
+    }
+
+    @PostConstruct
+    public void init(){
+        log.debug("初始化");
+    }
+
+    @PreDestroy
+    public void destroy(){
+        log.debug("销毁");
+    }
+}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1648477945616)
+++ b/src/main/resources/application.properties	(date 1648477945616)
@@ -0,0 +1,5 @@
+server.port=9966
+logging.level.com.study=debug
+
+spring.datasource.driver-class-name=com.alibaba.druid.proxy.DruidDriver
+spring.datasource.url=jdbc:mysql://121.36.147.178:3306/sonar
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c01/UserRegisterEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c01/UserRegisterEvent.java b/src/main/java/com/study/springstudy/c01/UserRegisterEvent.java
new file mode 100644
--- /dev/null	(date 1648133270444)
+++ b/src/main/java/com/study/springstudy/c01/UserRegisterEvent.java	(date 1648133270444)
@@ -0,0 +1,9 @@
+package com.study.springstudy.c01;
+
+import org.springframework.context.ApplicationEvent;
+
+public class UserRegisterEvent extends ApplicationEvent {
+    public UserRegisterEvent(Object source) {
+        super(source);
+    }
+}
Index: src/main/java/com/study/springstudy/c01/Component2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c01/Component2.java b/src/main/java/com/study/springstudy/c01/Component2.java
new file mode 100644
--- /dev/null	(date 1648133270461)
+++ b/src/main/java/com/study/springstudy/c01/Component2.java	(date 1648133270461)
@@ -0,0 +1,17 @@
+package com.study.springstudy.c01;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.context.event.EventListener;
+import org.springframework.stereotype.Component;
+
+@Component
+@Slf4j
+public class Component2 {
+
+
+    @EventListener
+    public void aaa(UserRegisterEvent event){
+        log.debug("event:{}", event);
+        log.debug("发送短信");
+    }
+}
Index: src/main/java/com/study/springstudy/SpringStudyApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/SpringStudyApplication.java b/src/main/java/com/study/springstudy/SpringStudyApplication.java
new file mode 100644
--- /dev/null	(date 1648133270465)
+++ b/src/main/java/com/study/springstudy/SpringStudyApplication.java	(date 1648133270465)
@@ -0,0 +1,20 @@
+package com.study.springstudy;
+
+import com.study.springstudy.c01.Component1;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.ConfigurableApplicationContext;
+
+@SpringBootApplication
+@Slf4j
+public class SpringStudyApplication {
+
+    public static void main(String[] args) {
+        ConfigurableApplicationContext context = SpringApplication.run(SpringStudyApplication.class, args);
+
+        context.getBean(Component1.class).register();
+        log.debug("124");
+    }
+
+}
Index: src/main/java/com/study/springstudy/c01/Component3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c01/Component3.java b/src/main/java/com/study/springstudy/c01/Component3.java
new file mode 100644
--- /dev/null	(date 1648133270437)
+++ b/src/main/java/com/study/springstudy/c01/Component3.java	(date 1648133270437)
@@ -0,0 +1,17 @@
+package com.study.springstudy.c01;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.context.event.EventListener;
+import org.springframework.stereotype.Component;
+
+@Component
+@Slf4j
+public class Component3 {
+
+
+    @EventListener
+    public void aaa(UserRegisterEvent event){
+        log.debug("event:{}", event);
+        log.debug("拨打电话");
+    }
+}
Index: src/test/java/com/study/springstudy/SpringStudyApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/study/springstudy/SpringStudyApplicationTests.java b/src/test/java/com/study/springstudy/SpringStudyApplicationTests.java
new file mode 100644
--- /dev/null	(date 1648035664933)
+++ b/src/test/java/com/study/springstudy/SpringStudyApplicationTests.java	(date 1648035664933)
@@ -0,0 +1,13 @@
+package com.study.springstudy;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class SpringStudyApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: ../.idea/libraries/Maven__ch_qos_logback_logback_classic_1_2_5.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__ch_qos_logback_logback_classic_1_2_5.xml b/../.idea/libraries/Maven__ch_qos_logback_logback_classic_1_2_5.xml
new file mode 100644
--- /dev/null	(date 1639117215579)
+++ b/../.idea/libraries/Maven__ch_qos_logback_logback_classic_1_2_5.xml	(date 1639117215579)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: ch.qos.logback:logback-classic:1.2.5">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/ch/qos/logback/logback-classic/1.2.5/logback-classic-1.2.5.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/ch/qos/logback/logback-classic/1.2.5/logback-classic-1.2.5-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/ch/qos/logback/logback-classic/1.2.5/logback-classic-1.2.5-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__com_google_code_gson_gson_2_8_6.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__com_google_code_gson_gson_2_8_6.xml b/../.idea/libraries/Maven__com_google_code_gson_gson_2_8_6.xml
new file mode 100644
--- /dev/null	(date 1639117215593)
+++ b/../.idea/libraries/Maven__com_google_code_gson_gson_2_8_6.xml	(date 1639117215593)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.code.gson:gson:2.8.6">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.6/gson-2.8.6-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.6/gson-2.8.6-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__ch_qos_logback_logback_core_1_2_5.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__ch_qos_logback_logback_core_1_2_5.xml b/../.idea/libraries/Maven__ch_qos_logback_logback_core_1_2_5.xml
new file mode 100644
--- /dev/null	(date 1639117215585)
+++ b/../.idea/libraries/Maven__ch_qos_logback_logback_core_1_2_5.xml	(date 1639117215585)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: ch.qos.logback:logback-core:1.2.5">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/ch/qos/logback/logback-core/1.2.5/logback-core-1.2.5.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/ch/qos/logback/logback-core/1.2.5/logback-core-1.2.5-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/ch/qos/logback/logback-core/1.2.5/logback-core-1.2.5-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__com_vaadin_external_google_android_json_0_0_20131108_vaadin1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__com_vaadin_external_google_android_json_0_0_20131108_vaadin1.xml b/../.idea/libraries/Maven__com_vaadin_external_google_android_json_0_0_20131108_vaadin1.xml
new file mode 100644
--- /dev/null	(date 1639117215605)
+++ b/../.idea/libraries/Maven__com_vaadin_external_google_android_json_0_0_20131108_vaadin1.xml	(date 1639117215605)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__com_jayway_jsonpath_json_path_2_5_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__com_jayway_jsonpath_json_path_2_5_0.xml b/../.idea/libraries/Maven__com_jayway_jsonpath_json_path_2_5_0.xml
new file mode 100644
--- /dev/null	(date 1639117215599)
+++ b/../.idea/libraries/Maven__com_jayway_jsonpath_json_path_2_5_0.xml	(date 1639117215599)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.jayway.jsonpath:json-path:2.5.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/jayway/jsonpath/json-path/2.5.0/json-path-2.5.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/jayway/jsonpath/json-path/2.5.0/json-path-2.5.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/jayway/jsonpath/json-path/2.5.0/json-path-2.5.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c02ContainerImpl/TestBeanFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c02ContainerImpl/TestBeanFactory.java b/src/main/java/com/study/springstudy/c02ContainerImpl/TestBeanFactory.java
new file mode 100644
--- /dev/null	(date 1648046362446)
+++ b/src/main/java/com/study/springstudy/c02ContainerImpl/TestBeanFactory.java	(date 1648046362446)
@@ -0,0 +1,94 @@
+package com.study.springstudy.c02ContainerImpl;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.springframework.beans.factory.support.AbstractBeanDefinition;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.context.annotation.AnnotationConfigUtils;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+public class TestBeanFactory {
+    public static void main(String[] args) {
+        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
+        // 添加bean定义 (class/scope/初始化/销毁)
+        AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(Config.class).setScope("singleton").getBeanDefinition();
+        beanFactory.registerBeanDefinition("config",beanDefinition);
+
+        for (String name : beanFactory.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+        System.out.println(  );
+        // 原始的 beanFactory 没有处理@Configuration和@Bean能力
+        // 给 beanFactory 添加常用的后处理器
+        AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);
+        /**
+         * org.springframework.context.annotation.internalConfigurationAnnotationProcessor beanFactory后处理器 处理Configuration注解和里面的注解内容@Bean
+         * org.springframework.context.annotation.internalAutowiredAnnotationProcessor  bean后处理器
+         * org.springframework.context.annotation.internalCommonAnnotationProcessor
+         * org.springframework.context.event.internalEventListenerProcessor
+         * org.springframework.context.event.internalEventListenerFactory
+         */
+
+        // BeanFactory后处理器 主要功能，补充了bean定义
+        beanFactory.getBeansOfType(BeanFactoryPostProcessor.class).values().forEach(beanFactoryPostProcessor -> {
+            beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);
+
+        });
+
+        // Bean后处理器，针对bean生命周期的各个阶段提供扩展功能，例如 @Autowired @Resource ...
+        // 建立bean工厂和后处理器的联系
+        beanFactory.getBeansOfType(BeanPostProcessor.class).values().forEach(beanFactory::addBeanPostProcessor);
+
+        for (String name : beanFactory.getBeanDefinitionNames()) {
+            System.out.println(name);
+        }
+        // 预先实例化单例对象
+        beanFactory.preInstantiateSingletons();
+        System.out.println(">>>>>>>>>");
+        System.out.println(beanFactory.getBean(Bean1.class).getBean2());
+
+        /*
+          beanFactory
+           1.不会主动调用 BeanFactory 后处理器
+           2.不会主动调用 Bean 后处理器
+           3.不会主动初始化单例
+           4.不会解析beanFactory 不会解析 #{} ${}
+          bean 后处理器会有排序的逻辑
+         */
+    }
+
+
+    @Configuration
+    static class Config{
+        @Bean
+        public Bean1 bean1(){return new Bean1();}
+        @Bean
+        public Bean2 bean2(){return new Bean2();}
+    }
+
+    @Slf4j
+    static class Bean1{
+        public Bean1() {
+            log.debug("构造 Bean1()");
+        }
+
+        @Autowired
+        private Bean2 bean2;
+
+        public Bean2 getBean2() {
+            return bean2;
+        }
+    }
+
+
+    @Slf4j
+    static class Bean2{
+        public Bean2() {
+            log.debug("构造 Bean2()");
+        }
+    }
+}
Index: ../.idea/libraries/Maven__jakarta_annotation_jakarta_annotation_api_1_3_5.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__jakarta_annotation_jakarta_annotation_api_1_3_5.xml b/../.idea/libraries/Maven__jakarta_annotation_jakarta_annotation_api_1_3_5.xml
new file mode 100644
--- /dev/null	(date 1639117215620)
+++ b/../.idea/libraries/Maven__jakarta_annotation_jakarta_annotation_api_1_3_5.xml	(date 1639117215620)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: jakarta.annotation:jakarta.annotation-api:1.3.5">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__jakarta_activation_jakarta_activation_api_1_2_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__jakarta_activation_jakarta_activation_api_1_2_2.xml b/../.idea/libraries/Maven__jakarta_activation_jakarta_activation_api_1_2_2.xml
new file mode 100644
--- /dev/null	(date 1639117215613)
+++ b/../.idea/libraries/Maven__jakarta_activation_jakarta_activation_api_1_2_2.xml	(date 1639117215613)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: jakarta.activation:jakarta.activation-api:1.2.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_10_22.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_10_22.xml b/../.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_10_22.xml
new file mode 100644
--- /dev/null	(date 1639117215635)
+++ b/../.idea/libraries/Maven__net_bytebuddy_byte_buddy_1_10_22.xml	(date 1639117215635)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: net.bytebuddy:byte-buddy:1.10.22">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.10.22/byte-buddy-1.10.22.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.10.22/byte-buddy-1.10.22-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy/1.10.22/byte-buddy-1.10.22-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__jakarta_xml_bind_jakarta_xml_bind_api_2_3_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__jakarta_xml_bind_jakarta_xml_bind_api_2_3_3.xml b/../.idea/libraries/Maven__jakarta_xml_bind_jakarta_xml_bind_api_2_3_3.xml
new file mode 100644
--- /dev/null	(date 1639117215626)
+++ b/../.idea/libraries/Maven__jakarta_xml_bind_jakarta_xml_bind_api_2_3_3.xml	(date 1639117215626)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__net_minidev_accessors_smart_2_4_7.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__net_minidev_accessors_smart_2_4_7.xml b/../.idea/libraries/Maven__net_minidev_accessors_smart_2_4_7.xml
new file mode 100644
--- /dev/null	(date 1639117215648)
+++ b/../.idea/libraries/Maven__net_minidev_accessors_smart_2_4_7.xml	(date 1639117215648)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: net.minidev:accessors-smart:2.4.7">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_10_22.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_10_22.xml b/../.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_10_22.xml
new file mode 100644
--- /dev/null	(date 1639117215641)
+++ b/../.idea/libraries/Maven__net_bytebuddy_byte_buddy_agent_1_10_22.xml	(date 1639117215641)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: net.bytebuddy:byte-buddy-agent:1.10.22">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.10.22/byte-buddy-agent-1.10.22.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.10.22/byte-buddy-agent-1.10.22-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/bytebuddy/byte-buddy-agent/1.10.22/byte-buddy-agent-1.10.22-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_apache_logging_log4j_log4j_api_2_14_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_apache_logging_log4j_log4j_api_2_14_1.xml b/../.idea/libraries/Maven__org_apache_logging_log4j_log4j_api_2_14_1.xml
new file mode 100644
--- /dev/null	(date 1639117215662)
+++ b/../.idea/libraries/Maven__org_apache_logging_log4j_log4j_api_2_14_1.xml	(date 1639117215662)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.logging.log4j:log4j-api:2.14.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-api/2.14.1/log4j-api-2.14.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-api/2.14.1/log4j-api-2.14.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-api/2.14.1/log4j-api-2.14.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c05BeanFacPostProces/AtBeanPostProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c05BeanFacPostProces/AtBeanPostProcessor.java b/src/main/java/com/study/springstudy/c05BeanFacPostProces/AtBeanPostProcessor.java
new file mode 100644
--- /dev/null	(date 1648377815203)
+++ b/src/main/java/com/study/springstudy/c05BeanFacPostProces/AtBeanPostProcessor.java	(date 1648377815203)
@@ -0,0 +1,48 @@
+package com.study.springstudy.c05BeanFacPostProces;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.AbstractBeanDefinition;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.context.annotation.Bean;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.type.MethodMetadata;
+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;
+import org.springframework.core.type.classreading.MetadataReader;
+
+import java.io.IOException;
+import java.util.Set;
+
+public class AtBeanPostProcessor implements BeanFactoryPostProcessor {
+    @Override
+    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {
+        CachingMetadataReaderFactory factory = new CachingMetadataReaderFactory();
+        // metadata 不走反射，通过class读，效率比反射高,读取源数据信息
+        try {
+            MetadataReader reader = factory.getMetadataReader(new ClassPathResource("com/study/springstudy/c05BeanFacPostProces/Config.class"));
+            Set<MethodMetadata> methods = reader.getAnnotationMetadata().getAnnotatedMethods(Bean.class.getName());
+            for (MethodMetadata method : methods) {
+                System.out.println(method);
+                String initMethod = method.getAnnotationAttributes(Bean.class.getName()).get("initMethod").toString();
+
+                // 定义config对象的工厂方法
+                BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();
+                builder.setFactoryMethodOnBean(method.getMethodName(), "config");
+                // 指定自动装配机制 对于构造方法参数/工厂方法参数，使用AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR
+                builder.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);
+                if (initMethod.length() > 0) {
+                    builder.setInitMethodName(initMethod);
+                }
+                AbstractBeanDefinition bd = builder.getBeanDefinition();
+                if (configurableListableBeanFactory instanceof DefaultListableBeanFactory) {
+                    DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) configurableListableBeanFactory;
+                    beanFactory.registerBeanDefinition(method.getMethodName(), bd);
+                }
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
Index: ../.idea/libraries/Maven__net_minidev_json_smart_2_4_7.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__net_minidev_json_smart_2_4_7.xml b/../.idea/libraries/Maven__net_minidev_json_smart_2_4_7.xml
new file mode 100644
--- /dev/null	(date 1639117215656)
+++ b/../.idea/libraries/Maven__net_minidev_json_smart_2_4_7.xml	(date 1639117215656)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: net.minidev:json-smart:2.4.7">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/net/minidev/json-smart/2.4.7/json-smart-2.4.7-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/minidev/json-smart/2.4.7/json-smart-2.4.7-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_0.xml b/../.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_0.xml
new file mode 100644
--- /dev/null	(date 1639117215675)
+++ b/../.idea/libraries/Maven__org_apiguardian_apiguardian_api_1_1_0.xml	(date 1639117215675)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apiguardian:apiguardian-api:1.1.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_apache_logging_log4j_log4j_to_slf4j_2_14_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_apache_logging_log4j_log4j_to_slf4j_2_14_1.xml b/../.idea/libraries/Maven__org_apache_logging_log4j_log4j_to_slf4j_2_14_1.xml
new file mode 100644
--- /dev/null	(date 1639117215669)
+++ b/../.idea/libraries/Maven__org_apache_logging_log4j_log4j_to_slf4j_2_14_1.xml	(date 1639117215669)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apache.logging.log4j:log4j-to-slf4j:2.14.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-to-slf4j/2.14.1/log4j-to-slf4j-2.14.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-to-slf4j/2.14.1/log4j-to-slf4j-2.14.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/apache/logging/log4j/log4j-to-slf4j/2.14.1/log4j-to-slf4j-2.14.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_hamcrest_hamcrest_2_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_hamcrest_hamcrest_2_2.xml b/../.idea/libraries/Maven__org_hamcrest_hamcrest_2_2.xml
new file mode 100644
--- /dev/null	(date 1639117215690)
+++ b/../.idea/libraries/Maven__org_hamcrest_hamcrest_2_2.xml	(date 1639117215690)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.hamcrest:hamcrest:2.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest/2.2/hamcrest-2.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest/2.2/hamcrest-2.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_assertj_assertj_core_3_19_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_assertj_assertj_core_3_19_0.xml b/../.idea/libraries/Maven__org_assertj_assertj_core_3_19_0.xml
new file mode 100644
--- /dev/null	(date 1639117215683)
+++ b/../.idea/libraries/Maven__org_assertj_assertj_core_3_19_0.xml	(date 1639117215683)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.assertj:assertj-core:3.19.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/assertj/assertj-core/3.19.0/assertj-core-3.19.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/assertj/assertj-core/3.19.0/assertj-core-3.19.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/assertj/assertj-core/3.19.0/assertj-core-3.19.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_7_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_7_2.xml b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_7_2.xml
new file mode 100644
--- /dev/null	(date 1639117215703)
+++ b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_7_2.xml	(date 1639117215703)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-api:5.7.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.2/junit-jupiter-api-5.7.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.2/junit-jupiter-api-5.7.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.2/junit-jupiter-api-5.7.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_5_7_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_5_7_2.xml b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_5_7_2.xml
new file mode 100644
--- /dev/null	(date 1639117215696)
+++ b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_5_7_2.xml	(date 1639117215696)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter:5.7.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.2/junit-jupiter-5.7.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.2/junit-jupiter-5.7.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.2/junit-jupiter-5.7.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_params_5_7_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_params_5_7_2.xml b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_params_5_7_2.xml
new file mode 100644
--- /dev/null	(date 1639117215716)
+++ b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_params_5_7_2.xml	(date 1639117215716)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-params:5.7.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.2/junit-jupiter-params-5.7.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.2/junit-jupiter-params-5.7.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.2/junit-jupiter-params-5.7.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_7_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_7_2.xml b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_7_2.xml
new file mode 100644
--- /dev/null	(date 1639117215709)
+++ b/../.idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_7_2.xml	(date 1639117215709)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-engine:5.7.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.2/junit-jupiter-engine-5.7.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.2/junit-jupiter-engine-5.7.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.2/junit-jupiter-engine-5.7.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../multi-thread/src/main/java/com/study/netty/NettyHttpTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/src/main/java/com/study/netty/NettyHttpTest.java b/../multi-thread/src/main/java/com/study/netty/NettyHttpTest.java
new file mode 100644
--- /dev/null	(date 1650204591059)
+++ b/../multi-thread/src/main/java/com/study/netty/NettyHttpTest.java	(date 1650204591059)
@@ -0,0 +1,46 @@
+package com.study.netty;
+
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.SocketChannel;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.HttpServerCodec;
+import io.netty.handler.logging.LogLevel;
+import io.netty.handler.logging.LoggingHandler;
+import lombok.extern.slf4j.Slf4j;
+
+@Slf4j(topic = "c.NettyHttpTest")
+public class NettyHttpTest {
+    public static void main(String[] args) {
+        NioEventLoopGroup worker = new NioEventLoopGroup();
+        NioEventLoopGroup boss = new NioEventLoopGroup();
+        try {
+            ServerBootstrap serverBootstrap = new ServerBootstrap();
+            serverBootstrap.channel(NioServerSocketChannel.class);
+            serverBootstrap.group(boss, worker);
+
+            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
+
+                @Override
+                protected void initChannel(SocketChannel socketChannel) throws Exception {
+                    socketChannel.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG));
+                    socketChannel.pipeline().addLast(new HttpServerCodec());
+                    socketChannel.pipeline().addLast(new ChannelInboundHandlerAdapter(){
+                        @Override
+                        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+                            log.debug("{}", msg.getClass());
+                        }
+                    });
+                }
+            });
+            ChannelFuture channelFuture = serverBootstrap.bind("localhost", 8080);
+            channelFuture.channel().closeFuture().sync();
+        } catch (Exception e) {
+            log.error("error", e);
+        }
+    }
+}
Index: ../.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_7_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_7_2.xml b/../.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_7_2.xml
new file mode 100644
--- /dev/null	(date 1639117215728)
+++ b/../.idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_7_2.xml	(date 1639117215728)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.platform:junit-platform-engine:1.7.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.2/junit-platform-engine-1.7.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.2/junit-platform-engine-1.7.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.2/junit-platform-engine-1.7.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c06Aware/MyConfig2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c06Aware/MyConfig2.java b/src/main/java/com/study/springstudy/c06Aware/MyConfig2.java
new file mode 100644
--- /dev/null	(date 1648476889107)
+++ b/src/main/java/com/study/springstudy/c06Aware/MyConfig2.java	(date 1648476889107)
@@ -0,0 +1,37 @@
+package com.study.springstudy.c06Aware;
+
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import javax.annotation.PostConstruct;
+
+@Configuration
+@Slf4j
+public class MyConfig2 implements InitializingBean, ApplicationContextAware {
+    @Autowired
+    public void setApplicationContext(ApplicationContext applicationContext) {
+        log.debug("注入 applicationContext");
+    }
+
+//    @PostConstruct
+//    public void init(){
+//        log.debug("初始化");
+//    }
+
+    @Bean   // 添加 beanFactory 后处理器
+    public BeanFactoryPostProcessor processor() {
+        return beanFactory -> log.debug("执行processor2");
+    }
+
+    @Override
+    public void afterPropertiesSet() throws Exception {
+        log.debug("初始化");
+    }
+}
Index: ../.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_7_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_7_2.xml b/../.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_7_2.xml
new file mode 100644
--- /dev/null	(date 1639117215722)
+++ b/../.idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_7_2.xml	(date 1639117215722)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.platform:junit-platform-commons:1.7.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.2/junit-platform-commons-1.7.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.2/junit-platform-commons-1.7.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.2/junit-platform-commons-1.7.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c04BeanPostProcessor/DigAutowired.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c04BeanPostProcessor/DigAutowired.java b/src/main/java/com/study/springstudy/c04BeanPostProcessor/DigAutowired.java
new file mode 100644
--- /dev/null	(date 1648345946661)
+++ b/src/main/java/com/study/springstudy/c04BeanPostProcessor/DigAutowired.java	(date 1648345946661)
@@ -0,0 +1,55 @@
+package com.study.springstudy.c04BeanPostProcessor;
+
+import org.springframework.beans.PropertyValues;
+import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;
+import org.springframework.beans.factory.annotation.InjectionMetadata;
+import org.springframework.beans.factory.config.DependencyDescriptor;
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver;
+import org.springframework.core.MethodParameter;
+import org.springframework.core.env.StandardEnvironment;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+
+public class DigAutowired {
+    public static void main(String[] args) throws Throwable {
+        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
+        beanFactory.registerSingleton("bean2", new Bean2()); // 创建过程,依赖注入,初始化
+        beanFactory.registerSingleton("bean3", new Bean3());
+        beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver()); // @Value
+        beanFactory.addEmbeddedValueResolver(new StandardEnvironment()::resolvePlaceholders); // ${} 的解析器
+
+        // 1. 查找哪些属性、方法加了 @Autowired, 这称之为 InjectionMetadata
+        AutowiredAnnotationBeanPostProcessor processor = new AutowiredAnnotationBeanPostProcessor();
+        processor.setBeanFactory(beanFactory);
+
+        Bean1 bean1 = new Bean1();
+//        System.out.println(bean1);
+//        processor.postProcessProperties(null, bean1, "bean1"); // 执行依赖注入 @Autowired @Value
+//        System.out.println(bean1);
+
+        Method find = AutowiredAnnotationBeanPostProcessor.class.getDeclaredMethod("findAutowiringMetadata", String.class, Class.class, PropertyValues.class);
+        find.setAccessible(true);
+        InjectionMetadata metadata = (InjectionMetadata) find.invoke(processor,"bean1",Bean1.class,null);    // 货物bean1上加了 @Value @Autowired的成员便令、方法参数信息
+//        System.out.println(metadata);
+        metadata.inject(bean1, "bean1", null);
+        System.out.println(bean1);
+
+        Field bean3 = Bean1.class.getDeclaredField("bean3");
+        DependencyDescriptor dd1 = new DependencyDescriptor(bean3,false);
+        Object o = beanFactory.doResolveDependency(dd1, null, null, null);
+        System.out.println(o);
+
+
+        Method setBean2 = Bean1.class.getDeclaredMethod("setBean2", Bean2.class);
+        DependencyDescriptor dd2 = new DependencyDescriptor(new MethodParameter(setBean2, 0), false);
+        Object o1 = beanFactory.doResolveDependency(dd2, null, null, null);
+        System.out.println(o1);
+
+        Method setHome = Bean1.class.getDeclaredMethod("setHome", String.class);
+        DependencyDescriptor dd3 = new DependencyDescriptor(new MethodParameter(setHome, 0), true);
+        Object o2 = beanFactory.doResolveDependency(dd3, null, null, null);
+        System.out.println(o2);
+    }
+}
Index: ../.idea/libraries/Maven__org_mockito_mockito_junit_jupiter_3_9_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_mockito_mockito_junit_jupiter_3_9_0.xml b/../.idea/libraries/Maven__org_mockito_mockito_junit_jupiter_3_9_0.xml
new file mode 100644
--- /dev/null	(date 1639117215743)
+++ b/../.idea/libraries/Maven__org_mockito_mockito_junit_jupiter_3_9_0.xml	(date 1639117215743)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.mockito:mockito-junit-jupiter:3.9.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-junit-jupiter/3.9.0/mockito-junit-jupiter-3.9.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-junit-jupiter/3.9.0/mockito-junit-jupiter-3.9.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-junit-jupiter/3.9.0/mockito-junit-jupiter-3.9.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml b/../.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml
new file mode 100644
--- /dev/null	(date 1639117215737)
+++ b/../.idea/libraries/Maven__org_mockito_mockito_core_3_9_0.xml	(date 1639117215737)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.mockito:mockito-core:3.9.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-core/3.9.0/mockito-core-3.9.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-core/3.9.0/mockito-core-3.9.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/mockito/mockito-core/3.9.0/mockito-core-3.9.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_openjdk_jol_jol_core_0_16.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_openjdk_jol_jol_core_0_16.xml b/../.idea/libraries/Maven__org_openjdk_jol_jol_core_0_16.xml
new file mode 100644
--- /dev/null	(date 1639117215759)
+++ b/../.idea/libraries/Maven__org_openjdk_jol_jol_core_0_16.xml	(date 1639117215759)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.openjdk.jol:jol-core:0.16">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjdk/jol/jol-core/0.16/jol-core-0.16.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjdk/jol/jol-core/0.16/jol-core-0.16-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/openjdk/jol/jol-core/0.16/jol-core-0.16-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml b/../.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml
new file mode 100644
--- /dev/null	(date 1639117215752)
+++ b/../.idea/libraries/Maven__org_objenesis_objenesis_3_2.xml	(date 1639117215752)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.objenesis:objenesis:3.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/objenesis/objenesis/3.2/objenesis-3.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/objenesis/objenesis/3.2/objenesis-3.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/objenesis/objenesis/3.2/objenesis-3.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_ow2_asm_asm_9_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_ow2_asm_asm_9_1.xml b/../.idea/libraries/Maven__org_ow2_asm_asm_9_1.xml
new file mode 100644
--- /dev/null	(date 1639117215775)
+++ b/../.idea/libraries/Maven__org_ow2_asm_asm_9_1.xml	(date 1639117215775)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.ow2.asm:asm:9.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/ow2/asm/asm/9.1/asm-9.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/ow2/asm/asm/9.1/asm-9.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/ow2/asm/asm/9.1/asm-9.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml b/../.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml
new file mode 100644
--- /dev/null	(date 1639117215767)
+++ b/../.idea/libraries/Maven__org_opentest4j_opentest4j_1_2_0.xml	(date 1639117215767)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.opentest4j:opentest4j:1.2.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml b/../.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml
new file mode 100644
--- /dev/null	(date 1639117215791)
+++ b/../.idea/libraries/Maven__org_skyscreamer_jsonassert_1_5_0.xml	(date 1639117215791)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.skyscreamer:jsonassert:1.5.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/skyscreamer/jsonassert/1.5.0/jsonassert-1.5.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c07Initial/Bean2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c07Initial/Bean2.java b/src/main/java/com/study/springstudy/c07Initial/Bean2.java
new file mode 100644
--- /dev/null	(date 1648561603042)
+++ b/src/main/java/com/study/springstudy/c07Initial/Bean2.java	(date 1648561603042)
@@ -0,0 +1,10 @@
+package com.study.springstudy.c07Initial;
+
+import org.springframework.beans.factory.DisposableBean;
+
+public class Bean2 implements DisposableBean {
+    @Override
+    public void destroy() throws Exception {
+
+    }
+}
Index: ../.idea/libraries/Maven__org_projectlombok_lombok_1_18_20.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_projectlombok_lombok_1_18_20.xml b/../.idea/libraries/Maven__org_projectlombok_lombok_1_18_20.xml
new file mode 100644
--- /dev/null	(date 1639117215783)
+++ b/../.idea/libraries/Maven__org_projectlombok_lombok_1_18_20.xml	(date 1639117215783)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.projectlombok:lombok:1.18.20">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.20/lombok-1.18.20.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.20/lombok-1.18.20-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.20/lombok-1.18.20-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_32.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_32.xml b/../.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_32.xml
new file mode 100644
--- /dev/null	(date 1639117215807)
+++ b/../.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_32.xml	(date 1639117215807)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.slf4j:slf4j-api:1.7.32">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_slf4j_jul_to_slf4j_1_7_32.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_slf4j_jul_to_slf4j_1_7_32.xml b/../.idea/libraries/Maven__org_slf4j_jul_to_slf4j_1_7_32.xml
new file mode 100644
--- /dev/null	(date 1639117215800)
+++ b/../.idea/libraries/Maven__org_slf4j_jul_to_slf4j_1_7_32.xml	(date 1639117215800)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.slf4j:jul-to-slf4j:1.7.32">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/jul-to-slf4j/1.7.32/jul-to-slf4j-1.7.32.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/jul-to-slf4j/1.7.32/jul-to-slf4j-1.7.32-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/slf4j/jul-to-slf4j/1.7.32/jul-to-slf4j-1.7.32-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215819)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_autoconfigure_2_5_4.xml	(date 1639117215819)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-autoconfigure:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-autoconfigure/2.5.4/spring-boot-autoconfigure-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-autoconfigure/2.5.4/spring-boot-autoconfigure-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-autoconfigure/2.5.4/spring-boot-autoconfigure-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215813)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_2_5_4.xml	(date 1639117215813)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot/2.5.4/spring-boot-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot/2.5.4/spring-boot-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot/2.5.4/spring-boot-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c07Initial/Bean1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c07Initial/Bean1.java b/src/main/java/com/study/springstudy/c07Initial/Bean1.java
new file mode 100644
--- /dev/null	(date 1648477562786)
+++ b/src/main/java/com/study/springstudy/c07Initial/Bean1.java	(date 1648477562786)
@@ -0,0 +1,26 @@
+package com.study.springstudy.c07Initial;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.InitializingBean;
+
+import javax.annotation.PostConstruct;
+
+@Slf4j
+public class Bean1 implements InitializingBean {
+
+    @PostConstruct
+    public void init(){
+        log.debug("初始化1");
+    }
+
+    @Override
+    public void afterPropertiesSet() throws Exception {
+        log.debug("初始化2");
+    }
+
+
+
+    private void init3() {
+        log.debug("初始化3");
+    }
+}
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215832)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_logging_2_5_4.xml	(date 1639117215832)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-logging:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.5.4/spring-boot-starter-logging-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.5.4/spring-boot-starter-logging-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-logging/2.5.4/spring-boot-starter-logging-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215825)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_2_5_4.xml	(date 1639117215825)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-starter:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.5.4/spring-boot-starter-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.5.4/spring-boot-starter-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter/2.5.4/spring-boot-starter-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c07Initial/C07Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c07Initial/C07Application.java b/src/main/java/com/study/springstudy/c07Initial/C07Application.java
new file mode 100644
--- /dev/null	(date 1648477562777)
+++ b/src/main/java/com/study/springstudy/c07Initial/C07Application.java	(date 1648477562777)
@@ -0,0 +1,25 @@
+package com.study.springstudy.c07Initial;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.annotation.Bean;
+
+@SpringBootApplication
+public class C07Application {
+    public static void main(String[] args) {
+        ConfigurableApplicationContext context = SpringApplication.run(C07Application.class, args);
+
+        context.close();
+    }
+
+    @Bean(initMethod = "init3")
+    public Bean1 bean1() {
+        return new Bean1();
+    }
+
+//    @Bean(destroyMethod = "")
+//    public Bean2 bean2() {
+//        return new Bean2();
+//    }
+}
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215844)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_2_5_4.xml	(date 1639117215844)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-test:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.5.4/spring-boot-test-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.5.4/spring-boot-test-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test/2.5.4/spring-boot-test-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215838)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_starter_test_2_5_4.xml	(date 1639117215838)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-starter-test:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.5.4/spring-boot-starter-test-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.5.4/spring-boot-starter-test-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-starter-test/2.5.4/spring-boot-starter-test-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_aop_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_aop_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_aop_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215859)
+++ b/../.idea/libraries/Maven__org_springframework_spring_aop_5_3_9.xml	(date 1639117215859)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-aop:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.9/spring-aop-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.9/spring-aop-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-aop/5.3.9/spring-aop-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_5_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_5_4.xml b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_5_4.xml
new file mode 100644
--- /dev/null	(date 1639117215851)
+++ b/../.idea/libraries/Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_5_4.xml	(date 1639117215851)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.5.4">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.5.4/spring-boot-test-autoconfigure-2.5.4.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.5.4/spring-boot-test-autoconfigure-2.5.4-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/boot/spring-boot-test-autoconfigure/2.5.4/spring-boot-test-autoconfigure-2.5.4-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_context_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_context_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_context_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215873)
+++ b/../.idea/libraries/Maven__org_springframework_spring_context_5_3_9.xml	(date 1639117215873)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-context:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-context/5.3.9/spring-context-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-context/5.3.9/spring-context-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-context/5.3.9/spring-context-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_beans_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_beans_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_beans_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215866)
+++ b/../.idea/libraries/Maven__org_springframework_spring_beans_5_3_9.xml	(date 1639117215866)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-beans:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-beans/5.3.9/spring-beans-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-beans/5.3.9/spring-beans-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-beans/5.3.9/spring-beans-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_expression_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_expression_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_expression_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215890)
+++ b/../.idea/libraries/Maven__org_springframework_spring_expression_5_3_9.xml	(date 1639117215890)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-expression:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.9/spring-expression-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.9/spring-expression-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-expression/5.3.9/spring-expression-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_core_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_core_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_core_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215880)
+++ b/../.idea/libraries/Maven__org_springframework_spring_core_5_3_9.xml	(date 1639117215880)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-core:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.9/spring-core-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.9/spring-core-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-core/5.3.9/spring-core-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_test_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_test_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_test_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215908)
+++ b/../.idea/libraries/Maven__org_springframework_spring_test_5_3_9.xml	(date 1639117215908)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-test:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.9/spring-test-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.9/spring-test-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-test/5.3.9/spring-test-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_springframework_spring_jcl_5_3_9.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_springframework_spring_jcl_5_3_9.xml b/../.idea/libraries/Maven__org_springframework_spring_jcl_5_3_9.xml
new file mode 100644
--- /dev/null	(date 1639117215899)
+++ b/../.idea/libraries/Maven__org_springframework_spring_jcl_5_3_9.xml	(date 1639117215899)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.springframework:spring-jcl:5.3.9">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.9/spring-jcl-5.3.9.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.9/spring-jcl-5.3.9-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/springframework/spring-jcl/5.3.9/spring-jcl-5.3.9-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_yaml_snakeyaml_1_28.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_yaml_snakeyaml_1_28.xml b/../.idea/libraries/Maven__org_yaml_snakeyaml_1_28.xml
new file mode 100644
--- /dev/null	(date 1639117215927)
+++ b/../.idea/libraries/Maven__org_yaml_snakeyaml_1_28.xml	(date 1639117215927)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.yaml:snakeyaml:1.28">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.28/snakeyaml-1.28.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.28/snakeyaml-1.28-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.28/snakeyaml-1.28-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: ../.idea/libraries/Maven__org_xmlunit_xmlunit_core_2_8_2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/libraries/Maven__org_xmlunit_xmlunit_core_2_8_2.xml b/../.idea/libraries/Maven__org_xmlunit_xmlunit_core_2_8_2.xml
new file mode 100644
--- /dev/null	(date 1639117215918)
+++ b/../.idea/libraries/Maven__org_xmlunit_xmlunit_core_2_8_2.xml	(date 1639117215918)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.xmlunit:xmlunit-core:2.8.2">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xmlunit/xmlunit-core/2.8.2/xmlunit-core-2.8.2.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xmlunit/xmlunit-core/2.8.2/xmlunit-core-2.8.2-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/xmlunit/xmlunit-core/2.8.2/xmlunit-core-2.8.2-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/com/study/springstudy/c04BeanPostProcessor/C04Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c04BeanPostProcessor/C04Application.java b/src/main/java/com/study/springstudy/c04BeanPostProcessor/C04Application.java
new file mode 100644
--- /dev/null	(date 1648302393074)
+++ b/src/main/java/com/study/springstudy/c04BeanPostProcessor/C04Application.java	(date 1648302393074)
@@ -0,0 +1,37 @@
+package com.study.springstudy.c04BeanPostProcessor;
+
+import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;
+import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor;
+import org.springframework.context.annotation.CommonAnnotationBeanPostProcessor;
+import org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver;
+import org.springframework.context.support.GenericApplicationContext;
+
+/**
+ * bena 后处理器
+ */
+public class C04Application {
+
+    public static void main(String[] args) {
+        // [干净]的容器
+        GenericApplicationContext context = new GenericApplicationContext();
+
+
+        context.registerBean("bean1", Bean1.class);
+        context.registerBean("bean2", Bean2.class);
+        context.registerBean("bean3", Bean3.class);
+        context.registerBean("bean4",Bean4.class);
+        // 可添加@Value值的获取
+        context.getDefaultListableBeanFactory().setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver());
+        // @Autowired @Value
+        context.registerBean(AutowiredAnnotationBeanPostProcessor.class);
+        // @Resource @PostConstruct @PreDestroy
+        context.registerBean(CommonAnnotationBeanPostProcessor.class);
+        // @ConfigurationProperties
+        ConfigurationPropertiesBindingPostProcessor.register(context.getDefaultListableBeanFactory());
+        // 初始化容器，执行beanFactory后处理器，添加bean后处理器，初始化所有单例
+        context.refresh();
+
+        System.out.println(context.getBean(Bean4.class));
+        context.close();
+    }
+}
Index: src/main/java/com/study/springstudy/c09ajc/service/MyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c09ajc/service/MyService.java b/src/main/java/com/study/springstudy/c09ajc/service/MyService.java
new file mode 100644
--- /dev/null	(date 1650379601721)
+++ b/src/main/java/com/study/springstudy/c09ajc/service/MyService.java	(date 1650379601721)
@@ -0,0 +1,13 @@
+package com.study.springstudy.c09ajc.service;
+
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Service;
+
+@Service
+@Slf4j
+public class MyService {
+    public void foo() {
+        log.debug("foo");
+    }
+}
Index: src/main/java/com/study/springstudy/c09ajc/aop/MyAspect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c09ajc/aop/MyAspect.java b/src/main/java/com/study/springstudy/c09ajc/aop/MyAspect.java
new file mode 100644
--- /dev/null	(date 1651289158313)
+++ b/src/main/java/com/study/springstudy/c09ajc/aop/MyAspect.java	(date 1651289158313)
@@ -0,0 +1,15 @@
+package com.study.springstudy.c09ajc.aop;
+
+import lombok.extern.slf4j.Slf4j;
+import org.aspectj.lang.annotation.Aspect;
+import org.aspectj.lang.annotation.Before;
+
+@Aspect
+@Slf4j
+public class MyAspect {
+    @Before("execution(* com.study.springstudy.c09ajc.service.MyService.foo())")
+    public void before(){
+        log.debug("before");
+
+    }
+}
Index: src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean3.java b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean3.java
new file mode 100644
--- /dev/null	(date 1648182717108)
+++ b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean3.java	(date 1648182717108)
@@ -0,0 +1,4 @@
+package com.study.springstudy.c04BeanPostProcessor;
+
+public class Bean3 {
+}
Index: src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean4.java b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean4.java
new file mode 100644
--- /dev/null	(date 1648301123922)
+++ b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean4.java	(date 1648301123922)
@@ -0,0 +1,17 @@
+package com.study.springstudy.c04BeanPostProcessor;
+
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
+@ConfigurationProperties(prefix = "java")
+public class Bean4 {
+    private String home;
+    private String version;
+
+    public String getHome() {
+        return home;
+    }
+
+    public String getVersion() {
+        return version;
+    }
+}
Index: src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean1.java b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean1.java
new file mode 100644
--- /dev/null	(date 1648308339772)
+++ b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean1.java	(date 1648308339772)
@@ -0,0 +1,57 @@
+package com.study.springstudy.c04BeanPostProcessor;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+
+import javax.annotation.PostConstruct;
+import javax.annotation.PreDestroy;
+import javax.annotation.Resource;
+
+@Slf4j
+public class Bean1 {
+
+    private Bean2 bean2;
+
+    @Autowired
+    public void setBean2(Bean2 bean2) {
+        log.debug("@Autowired 生效: {}", bean2);
+        this.bean2 = bean2;
+    }
+
+    @Autowired
+    private Bean3 bean3;
+
+    @Resource
+    public void setBean3(Bean3 bean3) {
+        log.debug("@Resource 生效: {}", bean3);
+        this.bean3 = bean3;
+    }
+
+    private String home;
+
+    @Autowired
+    public void setHome(@Value("${MAVEN_HOME}") String home) {
+        log.debug("@Value 生效: {}", home);
+        this.home = home;
+    }
+
+    @PostConstruct
+    public void init() {
+        log.debug("@PostConstruct 生效");
+    }
+
+    @PreDestroy
+    public void destroy() {
+        log.debug("@PreDestroy 生效");
+    }
+
+    @Override
+    public String toString() {
+        return "Bean1{" +
+                "bean2=" + bean2 +
+                ", bean3=" + bean3 +
+                ", home='" + home + '\'' +
+                '}';
+    }
+}
Index: src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean2.java b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean2.java
new file mode 100644
--- /dev/null	(date 1648182717095)
+++ b/src/main/java/com/study/springstudy/c04BeanPostProcessor/Bean2.java	(date 1648182717095)
@@ -0,0 +1,4 @@
+package com.study.springstudy.c04BeanPostProcessor;
+
+public class Bean2 {
+}
Index: ../.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/encodings.xml b/../.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1639117215949)
+++ b/../.idea/encodings.xml	(date 1639117215949)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/multi-thread/src/main/java" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: ../.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"false\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/misc.xml b/../.idea/misc.xml
--- a/../.idea/misc.xml	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
+++ b/../.idea/misc.xml	(date 1639900834159)
@@ -1,4 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK" />
+  <component name="ASMPluginConfiguration">
+    <asm skipDebug="false" skipFrames="false" skipCode="false" expandFrames="false" />
+    <groovy codeStyle="LEGACY" />
+  </component>
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/multi-thread/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: ../.idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/compiler.xml b/../.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1639620818171)
+++ b/../.idea/compiler.xml	(date 1639620818171)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="multi-thread" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="multi-thread" target="1.8" />
+    </bytecodeTargetLevel>
+  </component>
+  <component name="JavacSettings">
+    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="multi-thread" options="-parameters" />
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: ../.idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/jarRepositories.xml b/../.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1639117215958)
+++ b/../.idea/jarRepositories.xml	(date 1639117215958)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="Nexus" />
+      <option name="name" value="Nexus" />
+      <option name="url" value="http://121.36.147.178:8081/repository/maven-public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: ../multi-thread/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.5.4</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.study</groupId>\r\n    <artifactId>multi-thread</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>multi-thread</name>\r\n    <description>Demo project for Spring Boot</description>\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.10</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.openjdk.jcstress</groupId>\r\n            <artifactId>jcstress-core</artifactId>\r\n            <version>0.3</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n\r\n\r\n\r\n        <dependency>\r\n            <groupId>org.openjdk.jol</groupId>\r\n            <artifactId>jol-core</artifactId>\r\n            <version>0.16</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>ch.qos.logback</groupId>\r\n            <artifactId>logback-classic</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../multi-thread/pom.xml b/../multi-thread/pom.xml
--- a/../multi-thread/pom.xml	(revision bc3a5fc6d4d88e4ff88f2b5a11cf62519124af69)
+++ b/../multi-thread/pom.xml	(date 1650202503736)
@@ -17,27 +17,16 @@
         <java.version>1.8</java.version>
     </properties>
     <dependencies>
+<!--        <dependency>-->
+<!--            <groupId>org.springframework.boot</groupId>-->
+<!--            <artifactId>spring-boot-starter</artifactId>-->
+<!--        </dependency>-->
+
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter</artifactId>
-        </dependency>
-
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.10</version>
-        </dependency>
-
-        <dependency>
-            <groupId>org.openjdk.jcstress</groupId>
-            <artifactId>jcstress-core</artifactId>
-            <version>0.3</version>
-            <scope>test</scope>
+            <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
 
-
-
-
         <dependency>
             <groupId>org.openjdk.jol</groupId>
             <artifactId>jol-core</artifactId>
@@ -55,9 +44,23 @@
         </dependency>
 
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-web</artifactId>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.9.0</version>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/io.netty/netty-all -->
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-all</artifactId>
+            <version>4.1.75.Final</version>
         </dependency>
+
+
     </dependencies>
 
     <build>
